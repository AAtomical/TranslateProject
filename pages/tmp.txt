yarn run v1.22.21
$ astro check && astro build && jampack ./dist
18:04:20 Types generated 107ms
18:04:20 [check] Getting diagnostics for Astro files in /home/chengziqiu/Workspace/translate-project/pages...
[96mplugin/BrokenMarkdownRemarkPlugin.ts[0m:[93m5[0m:[93m34[0m - [93mwarning[0m[90m ts(6133): [0m'parent' is declared but its value is never read.

[7m5[0m     modifyChildren((node, index, parent) => {
[7m [0m [93m                                 ~~~~~~[0m
[96mplugin/BrokenMarkdownRemarkPlugin.ts[0m:[93m5[0m:[93m27[0m - [93mwarning[0m[90m ts(6133): [0m'index' is declared but its value is never read.

[7m5[0m     modifyChildren((node, index, parent) => {
[7m [0m [93m                          ~~~~~[0m
[96mplugin/BrokenMarkdownRemarkPlugin.ts[0m:[93m4[0m:[93m17[0m - [93mwarning[0m[90m ts(6133): [0m'options' is declared but its value is never read.

[7m4[0m const plugin = (options) => (tree) => {
[7m [0m [93m                ~~~~~~~[0m

[96msrc/components/Card.tsx[0m:[93m14[0m:[93m5[0m - [93mwarning[0m[90m ts(6133): [0m'translator' is declared but its value is never read.

[7m14[0m     translator,
[7m  [0m [93m    ~~~~~~~~~~[0m
[96msrc/components/Card.tsx[0m:[93m2[0m:[93m1[0m - [93mwarning[0m[90m ts(6133): [0m'Datetime' is declared but its value is never read.

[7m2[0m import Datetime from "./Datetime";
[7m [0m [93m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m

[96msrc/components/Datetime.tsx[0m:[93m47[0m:[93m28[0m - [93mwarning[0m[90m ts(6198): [0mAll destructured elements are unused.

[7m47[0m const FormattedDatetime = ({ pubDatetime, modDatetime }: DatetimesProps) => {
[7m  [0m [93m                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
[96msrc/components/Datetime.tsx[0m:[93m1[0m:[93m1[0m - [93mwarning[0m[90m ts(6133): [0m'LOCALE' is declared but its value is never read.

[7m1[0m import { LOCALE } from "@config";
[7m [0m [93m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m

[96msrc/components/Footer.astro[0m:[93m5[0m:[93m7[0m - [93mwarning[0m[90m ts(6133): [0m'currentYear' is declared but its value is never read.

[7m5[0m const currentYear = new Date().getFullYear();
[7m [0m [93m      ~~~~~~~~~~~[0m
[96msrc/components/Footer.astro[0m:[93m3[0m:[93m1[0m - [93mwarning[0m[90m ts(6133): [0m'Socials' is declared but its value is never read.

[7m3[0m import Socials from "./Socials.astro";
[7m [0m [93m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m

[96msrc/components/Header.astro[0m:[93m4[0m:[93m1[0m - [93mwarning[0m[90m ts(6133): [0m'LinkButton' is declared but its value is never read.

[7m4[0m import LinkButton from "./LinkButton.astro";
[7m [0m [93m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m

[96msrc/layouts/Main.astro[0m:[93m2[0m:[93m1[0m - [93mwarning[0m[90m ts(6133): [0m'Breadcrumbs' is declared but its value is never read.

[7m2[0m import Breadcrumbs from "@components/Breadcrumbs.astro";
[7m [0m [93m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m

[96msrc/layouts/PostDetails.astro[0m:[93m6[0m:[93m1[0m - [93mwarning[0m[90m ts(6133): [0m'Datetime' is declared but its value is never read.

[7m6[0m import Datetime from "@components/Datetime";
[7m [0m [93m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
[96msrc/layouts/PostDetails.astro[0m:[93m5[0m:[93m1[0m - [93mwarning[0m[90m ts(6133): [0m'Tag' is declared but its value is never read.

[7m5[0m import Tag from "@components/Tag.astro";
[7m [0m [93m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m

[96msrc/pages/[status]/[page].astro[0m:[93m3[0m:[93m30[0m - [93mwarning[0m[90m ts(6133): [0m'CollectionEntry' is declared but its value is never read.

[7m3[0m import { getCollection, type CollectionEntry } from "astro:content";
[7m [0m [93m                             ~~~~~~~~~~~~~~~[0m

[96msrc/pages/posts/[...slug]/index.astro[0m:[93m27[0m:[93m7[0m - [93mwarning[0m[90m ts(6133): [0m'posts' is declared but its value is never read.

[7m27[0m const posts = await getCollection("blog");
[7m  [0m [93m      ~~~~~[0m
[96msrc/pages/posts/[...slug]/index.astro[0m:[93m24[0m:[93m7[0m - [93mwarning[0m[90m ts(6133): [0m'slug' is declared but its value is never read.

[7m24[0m const { slug } = Astro.params;
[7m  [0m [93m      ~~~~~~~~[0m
[96msrc/pages/posts/[...slug]/index.astro[0m:[93m7[0m:[93m1[0m - [93mwarning[0m[90m ts(6133): [0m'getPagination' is declared but its value is never read.

[7m7[0m import getPagination from "@utils/getPagination";
[7m [0m [93m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
[96msrc/pages/posts/[...slug]/index.astro[0m:[93m6[0m:[93m1[0m - [93mwarning[0m[90m ts(6133): [0m'getPageNumbers' is declared but its value is never read.

[7m6[0m import getPageNumbers from "@utils/getPageNumbers";
[7m [0m [93m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
[96msrc/pages/posts/[...slug]/index.astro[0m:[93m5[0m:[93m1[0m - [93mwarning[0m[90m ts(6133): [0m'getSortedPosts' is declared but its value is never read.

[7m5[0m import getSortedPosts from "@utils/getSortedPosts";
[7m [0m [93m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m
[96msrc/pages/posts/[...slug]/index.astro[0m:[93m3[0m:[93m1[0m - [93mwarning[0m[90m ts(6133): [0m'Posts' is declared but its value is never read.

[7m3[0m import Posts from "@layouts/Posts.astro";
[7m [0m [93m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m

Result (44 files): 
- 0 errors
- 0 warnings
- 20 hints

18:04:23 Types generated 104ms
18:04:23 [build] output: "static"
18:04:23 [build] directory: /home/chengziqiu/Workspace/translate-project/pages/dist/
18:04:23 [build] Collecting build info...
18:04:23 [build] ✓ Completed in 123ms.
18:04:23 [build] Building static entrypoints...
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'AstroPaper is a minimal, responsive and SEO-friendly Astro blog theme. I designed and crafted this based on ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://satnaing.dev/blog',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 2, column: 1, offset: 1 },
    end: { line: 2, column: 155, offset: 155 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'This theme is aimed to be accessible out of the box. Light and dark mode are supported by\n' +
        'default and additional color schemes can also be configured.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 4, column: 1, offset: 157 },
    end: { line: 5, column: 61, offset: 307 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'This theme is self-documented _ which means articles/posts in this theme can also be considered as documentations. So, see the documentation for more info.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 7, column: 1, offset: 309 },
    end: { line: 7, column: 157, offset: 465 }
  }
}
{
  type: 'html',
  value: '<div>\n' +
    '  <img src="/assets/dev.svg" class="sm:w-1/2 mx-auto" alt="coding dev illustration">\n' +
    '</div>',
  position: {
    start: { line: 9, column: 1, offset: 467 },
    end: { line: 11, column: 7, offset: 564 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Tech Stack', position: [Object] } ],
  position: {
    start: { line: 13, column: 1, offset: 566 },
    end: { line: 13, column: 14, offset: 579 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'This theme is written in vanilla JavaScript (+ TypeScript for type checking) and a little bit of ReactJS for some interactions. TailwindCSS is used for styling; and Markdown is used for blog contents.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 15, column: 1, offset: 581 },
    end: { line: 15, column: 201, offset: 781 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Features', position: [Object] } ],
  position: {
    start: { line: 17, column: 1, offset: 783 },
    end: { line: 17, column: 12, offset: 794 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Here are certain features of this site.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 19, column: 1, offset: 796 },
    end: { line: 19, column: 40, offset: 835 }
  }
}
{
  type: 'list',
  ordered: false,
  start: null,
  spread: false,
  children: [
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    }
  ],
  position: {
    start: { line: 21, column: 1, offset: 837 },
    end: { line: 29, column: 22, offset: 1015 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'If you like this theme, you can star/contribute to the ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://github.com/satnaing/astro-paper',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '.', position: [Object] },
    { type: 'break', position: [Object] },
    {
      type: 'text',
      value: 'Or you can even give any feedback via my ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'mailto:contact@satnaing.dev',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 31, column: 1, offset: 1017 },
    end: { line: 32, column: 79, offset: 1201 }
  }
}
{
  type: 'heading',
  depth: 1,
  children: [
    {
      type: 'text',
      value: 'Linux Kernel 成为 CVE 编号机构',
      position: [Object]
    }
  ],
  position: {
    start: { line: 2, column: 1, offset: 1 },
    end: { line: 2, column: 27, offset: 27 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'CVE 组织', position: [Object] },
    {
      type: 'link',
      title: null,
      url: 'https://www.cve.org/Media/News/item/news/2024/02/13/kernel-org-Added-as-CNA',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: '，Linux 内核已然正式成为 CVE 编号机构（CNA）。作为 CNA，Linux 具有在其软件产品中发现的漏洞分配 CVE 编号的权限，并向 CVE 数据库做出贡献。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 4, column: 1, offset: 29 },
    end: { line: 4, column: 175, offset: 203 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '这是一个趋势，越来越多的开源项目开始成为 CNA，以便自己管理对其项目的 CVE 分配，而不允许其他组织在未经他们参与的情况下分配 CVE。',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://daniel.haxx.se/blog/2024/01/16/curl-is-a-cna/',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: '出于相同的原因也成为了 CNA。我想要指出',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://www.cve.org/Media/News/item/news/2023/08/29/Python-Software-Foundation-Added-as-CNA',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '在支持这一努力方面所做的出色工作，', position: [Object] },
    {
      type: 'link',
      title: null,
      url: 'https://openssf.org/',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: '也鼓励并为开源项目提供文档和帮助。我还想感谢 ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://www.cve.org/',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ' 组织和董事会，因为他们在申请过程中给予了我们很大的帮助，并使这一切成为可能。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 6, column: 1, offset: 205 },
    end: { line: 6, column: 404, offset: 608 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: '众所周知，我之前曾', position: [Object] },
    {
      type: 'link',
      title: null,
      url: 'https://kernel-recipes.org/en/2019/talks/cves-are-dead-long-live-the-cve/',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: '，并且，我认为整个系统在许多方面都存在问题，但成为 CNA 这一变化也是我们承担更多责任的一种契机，并希望随着时间的推移系统能够改进。根据世界各地最近颁布的法律法规，所有的开源项目似乎都必须被要求进行这项工作，因此，有了内核的支持将使我们在未来有需要时能够通知各种不同的类似 CNA 的组织。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 8, column: 1, offset: 610 },
    end: { line: 8, column: 241, offset: 850 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: '有关内核将如何运作的更多细节，请参阅此', position: [Object] },
    {
      type: 'link',
      title: null,
      url: 'https://lore.kernel.org/lkml/2024021314-unwelcome-shrill-690e@gregkh/',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: '。这一流程可能会与其他CNA 的工作有些不同，但在很大程度上，这是因为内核存在于与大多数其他软件项目不同的层面，而且我们的用户群与几乎所有其他软件项目相比都是最广泛和最多样化的（当然，curl 项目是个例外，该项目',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://daniel.haxx.se/blog/2023/11/14/curl-on-100-operating-systems/',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '！）', position: [Object] }
  ],
  position: {
    start: { line: 10, column: 1, offset: 852 },
    end: { line: 10, column: 283, offset: 1134 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: '您可以在此', position: [Object] },
    {
      type: 'link',
      title: null,
      url: 'https://lore.kernel.org/linux-cve-announce/',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: '上找到我们分配的所有 CVE，并且如果您希望自动收到所有 CVE 的通知，请订阅该列表。可以在',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://git.kernel.org/pub/scm/linux/security/vulns.git/',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: '找到它们的 git 存储库，但请注意，随着时间的推移，存储库的结构会发生变化，因为我们在学习和管理流程方面会变得更加完善，所以暂时不要认为 git 树中的任何内容会固定不变。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 12, column: 1, offset: 1136 },
    end: { line: 12, column: 253, offset: 1388 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '一旦流程正常运转并且能够顺利分配 CVE，我会在未来写更多内容。这一公告只是第一步，它使我们成为了 Linux CVE 分配流程的管理者。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 14, column: 1, offset: 1390 },
    end: { line: 14, column: 70, offset: 1459 }
  }
}
{
  type: 'heading',
  depth: 1,
  children: [
    {
      type: 'text',
      value: 'Kernel Memory Leak Detector',
      position: [Object]
    }
  ],
  position: {
    start: { line: 1, column: 1, offset: 0 },
    end: { line: 1, column: 30, offset: 29 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Kmemleak provides a way of detecting possible kernel memory leaks in away similar to a ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://en.wikipedia.org/wiki/Tracing_garbage_collection',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ',with the difference that the orphan objects are not freed but only reported via /sys/kernel/debug/kmemleak. A similar method is used by the Valgrind tool (',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'memcheck --leak-check',
      position: [Object]
    },
    {
      type: 'text',
      value: ') to detect the memory leaks in user-space applications.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 3, column: 1, offset: 31 },
    end: { line: 3, column: 408, offset: 438 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Usage', position: [Object] } ],
  position: {
    start: { line: 5, column: 1, offset: 440 },
    end: { line: 5, column: 9, offset: 448 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'CONFIG_DEBUG_KMEMLEAK in “Kernel hacking” has to be enabled. A kernel thread scans the memory every 10 minutes (by default) and prints the number of new unreferenced objects found.If the ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'debugfs', position: [Object] },
    {
      type: 'text',
      value: ' isn’t already mounted, mount with:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 7, column: 1, offset: 450 },
    end: { line: 7, column: 237, offset: 686 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '# mount -t debugfs nodev /sys/kernel/debug/',
  position: {
    start: { line: 9, column: 1, offset: 688 },
    end: { line: 9, column: 48, offset: 735 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'To display the details of all the possible scanned memory leaks:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 11, column: 1, offset: 737 },
    end: { line: 11, column: 65, offset: 801 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '# cat /sys/kernel/debug/kmemleak',
  position: {
    start: { line: 13, column: 1, offset: 803 },
    end: { line: 13, column: 37, offset: 839 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'To trigger an intermediate memory scan:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 15, column: 1, offset: 841 },
    end: { line: 15, column: 40, offset: 880 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '# echo scan > /sys/kernel/debug/kmemleak',
  position: {
    start: { line: 17, column: 1, offset: 882 },
    end: { line: 17, column: 45, offset: 926 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'To clear the list of all current possible memory leaks:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 19, column: 1, offset: 928 },
    end: { line: 19, column: 56, offset: 983 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '# echo clear > /sys/kernel/debug/kmemleak',
  position: {
    start: { line: 21, column: 1, offset: 985 },
    end: { line: 21, column: 46, offset: 1030 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'New leaks will then come up upon reading ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: '/sys/kernel/debug/kmemleak',
      position: [Object]
    },
    { type: 'text', value: ' again.', position: [Object] }
  ],
  position: {
    start: { line: 23, column: 1, offset: 1032 },
    end: { line: 23, column: 77, offset: 1108 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Note that the orphan objects are listed in the order they were allocated and one object at the beginning of the list may cause other subsequent objects to be reported as orphan.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 25, column: 1, offset: 1110 },
    end: { line: 25, column: 178, offset: 1287 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Memory scanning parameters can be modified at run-time by writing to the ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: '/sys/kernel/debug/kmemleak',
      position: [Object]
    },
    {
      type: 'text',
      value: ' file. The following parameters are supported:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 27, column: 1, offset: 1289 },
    end: { line: 27, column: 148, offset: 1436 }
  }
}
{
  type: 'list',
  ordered: false,
  start: null,
  spread: false,
  children: [
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    }
  ],
  position: {
    start: { line: 29, column: 1, offset: 1438 },
    end: { line: 46, column: 56, offset: 2112 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Kmemleak can also be disabled at boot-time by passing ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'kmemleak=off', position: [Object] },
    {
      type: 'text',
      value: ' on the kernel command line.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 48, column: 1, offset: 2114 },
    end: { line: 48, column: 97, offset: 2210 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Memory may be allocated or freed before kmemleak is initialised and these actions are stored in an early log buffer. The size of this buffer is configured via the CONFIG_DEBUG_KMEMLEAK_MEM_POOL_SIZE option.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 50, column: 1, offset: 2212 },
    end: { line: 50, column: 212, offset: 2423 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'If CONFIG_DEBUG_KMEMLEAK_DEFAULT_OFF are enabled, the kmemleak is disabled by default. Passing ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'kmemleak=on', position: [Object] },
    {
      type: 'text',
      value: ' on the kernel command line enables the function.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 52, column: 1, offset: 2425 },
    end: { line: 52, column: 162, offset: 2586 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'If you are getting errors like “Error while writing to stdout” or “write_loop: Invalid argument”, make sure kmemleak is properly enabled.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 54, column: 1, offset: 2588 },
    end: { line: 54, column: 143, offset: 2730 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Basic Algorithm', position: [Object] } ],
  position: {
    start: { line: 56, column: 1, offset: 2732 },
    end: { line: 56, column: 19, offset: 2750 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The memory allocations via ',
      position: [Object]
    },
    {
      type: 'link',
      title: 'kmalloc',
      url: 'https://docs.kernel.org/core-api/mm-api.html#c.kmalloc',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ', ', position: [Object] },
    {
      type: 'link',
      title: 'vmalloc',
      url: 'https://docs.kernel.org/core-api/mm-api.html#c.vmalloc',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ', ', position: [Object] },
    {
      type: 'link',
      title: 'kmem_cache_alloc',
      url: 'https://docs.kernel.org/core-api/mm-api.html#c.kmem_cache_alloc',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ' and friends are traced and the pointers, together with additional information like size and stack trace, are stored in a rbtree. The corresponding freeing function calls are tracked and the pointers removed from the kmemleak data structures.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 58, column: 1, offset: 2752 },
    end: { line: 58, column: 538, offset: 3289 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'An allocated block of memory is considered orphan if no pointer to its start address or to any location inside the block can be found by scanning the memory (including saved registers). This means that there might be no way for the kernel to pass the address of the allocated block to a freeing function and therefore the block is considered a memory leak.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 60, column: 1, offset: 3291 },
    end: { line: 60, column: 357, offset: 3647 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The scanning algorithm steps:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 62, column: 1, offset: 3649 },
    end: { line: 62, column: 30, offset: 3678 }
  }
}
{
  type: 'blockquote',
  children: [
    {
      type: 'list',
      ordered: true,
      start: 1,
      spread: false,
      children: [Array],
      position: [Object]
    }
  ],
  position: {
    start: { line: 64, column: 1, offset: 3680 },
    end: { line: 68, column: 2, offset: 4231 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Some allocated memory blocks have pointers stored in the kernel’s internal data structures and they cannot be detected as orphans. To avoid this, kmemleak can also store the number of values pointing to an address inside the block address range that need to be found so that the block is not considered a leak. One example is __vmalloc().',
      position: [Object]
    }
  ],
  position: {
    start: { line: 70, column: 1, offset: 4233 },
    end: { line: 70, column: 342, offset: 4574 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [
    {
      type: 'text',
      value: 'Testing specific sections with kmemleak',
      position: [Object]
    }
  ],
  position: {
    start: { line: 72, column: 1, offset: 4576 },
    end: { line: 72, column: 43, offset: 4618 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Upon initial bootup your /sys/kernel/debug/kmemleak output page may be quite extensive. This can also be the case if you have very buggy code when doing development. To work around these situations you can use the ‘clear’ command to clear all reported unreferenced objects from the\n' +
        '/sys/kernel/debug/kmemleak output. By issuing a ‘scan’ after a ‘clear’ you can find new unreferenced objects; this should help with testing specific sections of code.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 74, column: 1, offset: 4620 },
    end: { line: 75, column: 171, offset: 5074 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'To test a critical section on demand with a clean kmemleak do:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 77, column: 1, offset: 5076 },
    end: { line: 77, column: 63, offset: 5138 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '# echo clear > /sys/kernel/debug/kmemleak\n' +
    '... test your kernel or modules ...\n' +
    '# echo scan > /sys/kernel/debug/kmemleak',
  position: {
    start: { line: 79, column: 1, offset: 5140 },
    end: { line: 81, column: 45, offset: 5270 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Then as usual to get your report with:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 83, column: 1, offset: 5272 },
    end: { line: 83, column: 39, offset: 5310 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '# cat /sys/kernel/debug/kmemleak',
  position: {
    start: { line: 85, column: 1, offset: 5312 },
    end: { line: 85, column: 37, offset: 5348 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [
    {
      type: 'text',
      value: 'Freeing kmemleak internal objects',
      position: [Object]
    }
  ],
  position: {
    start: { line: 87, column: 1, offset: 5350 },
    end: { line: 87, column: 37, offset: 5386 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'To allow access to previously found memory leaks after kmemleak has been disabled by the user or due to an fatal error, internal kmemleak objects won’t be freed when kmemleak is disabled, and those objects may occupy a large part of physical memory.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 89, column: 1, offset: 5388 },
    end: { line: 89, column: 251, offset: 5638 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'In this situation, you may reclaim memory with:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 91, column: 1, offset: 5640 },
    end: { line: 91, column: 48, offset: 5687 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '# echo clear > /sys/kernel/debug/kmemleak',
  position: {
    start: { line: 93, column: 1, offset: 5689 },
    end: { line: 93, column: 46, offset: 5734 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Kmemleak API', position: [Object] } ],
  position: {
    start: { line: 95, column: 1, offset: 5736 },
    end: { line: 95, column: 16, offset: 5751 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'See the include/linux/kmemleak.h header for the functions prototype.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 97, column: 1, offset: 5753 },
    end: { line: 97, column: 69, offset: 5821 }
  }
}
{
  type: 'list',
  ordered: false,
  start: null,
  spread: false,
  children: [
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    }
  ],
  position: {
    start: { line: 99, column: 1, offset: 5823 },
    end: { line: 115, column: 18, offset: 6787 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The following functions take a physical address as the object pointer and only perform the corresponding action if the address has a lowmem mapping:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 117, column: 1, offset: 6789 },
    end: { line: 117, column: 149, offset: 6937 }
  }
}
{
  type: 'list',
  ordered: false,
  start: null,
  spread: false,
  children: [
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    }
  ],
  position: {
    start: { line: 119, column: 1, offset: 6939 },
    end: { line: 121, column: 27, offset: 7021 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [
    {
      type: 'text',
      value: 'Dealing with false positives/negatives',
      position: [Object]
    }
  ],
  position: {
    start: { line: 123, column: 1, offset: 7023 },
    end: { line: 123, column: 42, offset: 7064 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The false negatives are real memory leaks (orphan objects) but not reported by kmemleak because values found during the memory scanning point to such objects. To reduce the number of false negatives, kmemleak provides the kmemleak_ignore, kmemleak_scan_area, kmemleak_no_scan and kmemleak_erase functions (see above). The task stacks also increase the amount of false negatives and their scanning is not enabled by default.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 125, column: 1, offset: 7066 },
    end: { line: 125, column: 430, offset: 7495 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The false positives are objects wrongly reported as being memory leaks (orphan). For objects known not to be leaks, kmemleak provides the kmemleak_not_leak function. The memleak_ignore could also be used if the memory block is known not to contain other pointers and it will no longer be scanned.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 127, column: 1, offset: 7497 },
    end: { line: 127, column: 300, offset: 7796 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Some of the reported leaks are only transient, especially on SMP systems, because of pointers temporarily stored in CPU registers or stacks. Kmemleak defines MSECS_MIN_AGE (defaulting to 1000) representing the minimum age of an object to be reported as a memory leak.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 129, column: 1, offset: 7798 },
    end: { line: 129, column: 270, offset: 8067 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [
    {
      type: 'text',
      value: 'Limitations and Drawbacks',
      position: [Object]
    }
  ],
  position: {
    start: { line: 131, column: 1, offset: 8069 },
    end: { line: 131, column: 29, offset: 8097 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The main drawback is the reduced performance of memory allocation and\n' +
        'freeing. To avoid other penalties, the memory scanning is only performed\n' +
        'when the /sys/kernel/debug/kmemleak file is read. Anyway, this tool is\n' +
        'intended for debugging purposes where the performance might not be the\n' +
        'most important requirement.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 133, column: 1, offset: 8099 },
    end: { line: 137, column: 28, offset: 8411 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'To keep the algorithm simple, kmemleak scans for values pointing to any\n' +
        'address inside a block’s address range. This may lead to an increased\n' +
        'number of false negatives. However, it is likely that a real memory leak\n' +
        'will eventually become visible.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 139, column: 1, offset: 8413 },
    end: { line: 142, column: 32, offset: 8660 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Another source of false negatives is the data stored in non-pointer\n' +
        'values. In a future version, kmemleak could only scan the pointer\n' +
        'members in the allocated structures. This feature would solve many of\n' +
        'the false negative cases described above.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 144, column: 1, offset: 8662 },
    end: { line: 147, column: 42, offset: 8907 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The tool can report false positives. These are cases where an allocated\n' +
        'block doesn’t need to be freed (some cases in the init_call\n' +
        'functions), the pointer is calculated by other methods than the usual\n' +
        'container_of macro or the pointer is stored in a location not scanned\n' +
        'by kmemleak.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 149, column: 1, offset: 8909 },
    end: { line: 153, column: 13, offset: 9196 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Page allocations and ioremap are not tracked.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 155, column: 1, offset: 9198 },
    end: { line: 155, column: 46, offset: 9243 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [
    {
      type: 'text',
      value: 'Testing with kmemleak-test',
      position: [Object]
    }
  ],
  position: {
    start: { line: 157, column: 1, offset: 9245 },
    end: { line: 157, column: 30, offset: 9274 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'To check if you have all set up to use kmemleak, you can use the kmemleak-test module, a module that deliberately leaks memory. Set CONFIG_SAMPLE_KMEMLEAK as module (it can’t be used as built-in) and boot the kernel with kmemleak enabled. Load the module and perform a scan with:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 159, column: 1, offset: 9276 },
    end: { line: 159, column: 283, offset: 9558 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '# modprobe kmemleak-test\n# echo scan > /sys/kernel/debug/kmemleak',
  position: {
    start: { line: 161, column: 1, offset: 9560 },
    end: { line: 162, column: 45, offset: 9633 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Note that the you may not get results instantly or on the first scanning. When kmemleak gets results, it’ll log ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'kmemleak: <count of leaks> new suspected memory leaks',
      position: [Object]
    },
    {
      type: 'text',
      value: '. Then read the file to see then:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 164, column: 1, offset: 9635 },
    end: { line: 164, column: 202, offset: 9836 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '# cat /sys/kernel/debug/kmemleak\n' +
    'unreferenced object 0xffff89862ca702e8 (size 32):\n' +
    '  comm "modprobe", pid 2088, jiffies 4294680594 (age 375.486s)\n' +
    '  hex dump (first 32 bytes):\n' +
    '    6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b  kkkkkkkkkkkkkkkk\n' +
    '    6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b 6b a5  kkkkkkkkkkkkkkk.\n' +
    '  backtrace:\n' +
    '    [<00000000e0a73ec7>] 0xffffffffc01d2036\n' +
    '    [<000000000c5d2a46>] do_one_initcall+0x41/0x1df\n' +
    '    [<0000000046db7e0a>] do_init_module+0x55/0x200\n' +
    '    [<00000000542b9814>] load_module+0x203c/0x2480\n' +
    '    [<00000000c2850256>] __do_sys_finit_module+0xba/0xe0\n' +
    '    [<000000006564e7ef>] do_syscall_64+0x43/0x110\n' +
    '    [<000000007c873fa6>] entry_SYSCALL_64_after_hwframe+0x44/0xa9\n' +
    '...',
  position: {
    start: { line: 166, column: 1, offset: 9838 },
    end: { line: 180, column: 8, offset: 10600 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Removing the module with ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'rmmod kmemleak_test',
      position: [Object]
    },
    {
      type: 'text',
      value: ' should also trigger some kmemleak results.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 182, column: 1, offset: 10602 },
    end: { line: 182, column: 90, offset: 10691 }
  }
}
{
  type: 'heading',
  depth: 1,
  children: [ { type: 'text', value: '未定义行为消毒剂 - UBSAN', position: [Object] } ],
  position: {
    start: { line: 2, column: 1, offset: 1 },
    end: { line: 2, column: 19, offset: 19 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'UBSAN是一种动态未定义行为检查工具。', position: [Object] }
  ],
  position: {
    start: { line: 4, column: 1, offset: 21 },
    end: { line: 4, column: 21, offset: 41 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'UBSAN 使用编译时插桩捕捉未定义行为。编译器在可能导致未定义行为\n' +
        '的操作前插入特定检查代码。如果检查失败，即，检测到未定义行为，\n' +
        '则 __',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '* 函数将被调用打印错误信息。', position: [Object] }
  ],
  position: {
    start: { line: 6, column: 1, offset: 43 },
    end: { line: 8, column: 39, offset: 148 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'GCC自4.9.x [', position: [Object] },
    {
      type: 'link',
      title: null,
      url: 'https://gcc.gnu.org/onlinedocs/gcc-4.9.0/gcc/Debugging-Options.html',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '] (详见 ', position: [Object] },
    {
      type: 'inlineCode',
      value: '-fsanitize=undefined',
      position: [Object]
    },
    {
      type: 'text',
      value: ' 选项及其子选项)之后引入\n这一特性。GCC 5.x 版本实现了更多检查器 [',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ']。', position: [Object] }
  ],
  position: {
    start: { line: 10, column: 1, offset: 150 },
    end: { line: 11, column: 92, offset: 370 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: '报告样例', position: [Object] } ],
  position: {
    start: { line: 13, column: 1, offset: 372 },
    end: { line: 13, column: 8, offset: 379 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '================================================================================\n' +
    'UBSAN: Undefined behaviour in ../include/linux/bitops.h:110:33\n' +
    "shift exponent 32 is to large for 32-bit type 'unsigned int'\n" +
    'CPU: 0 PID: 0 Comm: swapper Not tainted 4.4.0-rc1+ #26\n' +
    ' 0000000000000000 ffffffff82403cc8 ffffffff815e6cd6 0000000000000001\n' +
    ' ffffffff82403cf8 ffffffff82403ce0 ffffffff8163a5ed 0000000000000020\n' +
    ' ffffffff82403d78 ffffffff8163ac2b ffffffff815f0001 0000000000000002\n' +
    'Call Trace:\n' +
    ' [<ffffffff815e6cd6>] dump_stack+0x45/0x5f\n' +
    ' [<ffffffff8163a5ed>] ubsan_epilogue+0xd/0x40\n' +
    ' [<ffffffff8163ac2b>] __ubsan_handle_shift_out_of_bounds+0xeb/0x130\n' +
    ' [<ffffffff815f0001>] ? radix_tree_gang_lookup_slot+0x51/0x150\n' +
    ' [<ffffffff8173c586>] _mix_pool_bytes+0x1e6/0x480\n' +
    ' [<ffffffff83105653>] ? dmi_walk_early+0x48/0x5c\n' +
    ' [<ffffffff8173c881>] add_device_randomness+0x61/0x130\n' +
    ' [<ffffffff83105b35>] ? dmi_save_one_device+0xaa/0xaa\n' +
    ' [<ffffffff83105653>] dmi_walk_early+0x48/0x5c\n' +
    ' [<ffffffff831066ae>] dmi_scan_machine+0x278/0x4b4\n' +
    ' [<ffffffff8111d58a>] ? vprintk_default+0x1a/0x20\n' +
    ' [<ffffffff830ad120>] ? early_idt_handler_array+0x120/0x120\n' +
    ' [<ffffffff830b2240>] setup_arch+0x405/0xc2c\n' +
    ' [<ffffffff830ad120>] ? early_idt_handler_array+0x120/0x120\n' +
    ' [<ffffffff830ae053>] start_kernel+0x83/0x49a\n' +
    ' [<ffffffff830ad120>] ? early_idt_handler_array+0x120/0x120\n' +
    ' [<ffffffff830ad386>] x86_64_start_reservations+0x2a/0x2c\n' +
    ' [<ffffffff830ad4f3>] x86_64_start_kernel+0x16b/0x17a\n' +
    '================================================================================',
  position: {
    start: { line: 15, column: 1, offset: 381 },
    end: { line: 41, column: 85, offset: 2007 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: '用法', position: [Object] } ],
  position: {
    start: { line: 43, column: 1, offset: 2009 },
    end: { line: 43, column: 6, offset: 2014 }
  }
}
{
  type: 'paragraph',
  children: [ { type: 'text', value: '使用如下内核配置启用UBSAN:', position: [Object] } ],
  position: {
    start: { line: 45, column: 1, offset: 2016 },
    end: { line: 45, column: 17, offset: 2032 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'CONFIG_UBSAN=y',
  position: {
    start: { line: 47, column: 1, offset: 2034 },
    end: { line: 47, column: 19, offset: 2052 }
  }
}
{
  type: 'paragraph',
  children: [ { type: 'text', value: '使用如下内核配置检查整个内核:', position: [Object] } ],
  position: {
    start: { line: 49, column: 1, offset: 2054 },
    end: { line: 49, column: 16, offset: 2069 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'CONFIG_UBSAN_SANITIZE_ALL=y',
  position: {
    start: { line: 51, column: 1, offset: 2071 },
    end: { line: 51, column: 32, offset: 2102 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '为了在特定文件或目录中启动代码插桩，需要在相应的内核Makefile中添加\n一行类似内容:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 53, column: 1, offset: 2104 },
    end: { line: 54, column: 8, offset: 2149 }
  }
}
{
  type: 'list',
  ordered: false,
  start: null,
  spread: true,
  children: [
    {
      type: 'listItem',
      spread: true,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: true,
      checked: null,
      children: [Array],
      position: [Object]
    }
  ],
  position: {
    start: { line: 56, column: 1, offset: 2151 },
    end: { line: 62, column: 28, offset: 2250 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: '即使', position: [Object] },
    {
      type: 'inlineCode',
      value: 'CONFIG_UBSAN_SANITIZE_ALL=y',
      position: [Object]
    },
    { type: 'text', value: '，为了避免文件被插桩，可使用:', position: [Object] }
  ],
  position: {
    start: { line: 64, column: 1, offset: 2252 },
    end: { line: 64, column: 49, offset: 2300 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'UBSAN_SANITIZE_main.o := n',
  position: {
    start: { line: 66, column: 1, offset: 2302 },
    end: { line: 66, column: 31, offset: 2332 }
  }
}
{
  type: 'paragraph',
  children: [ { type: 'text', value: '与:', position: [Object] } ],
  position: {
    start: { line: 68, column: 1, offset: 2334 },
    end: { line: 68, column: 3, offset: 2336 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'UBSAN_SANITIZE := n',
  position: {
    start: { line: 70, column: 1, offset: 2338 },
    end: { line: 70, column: 24, offset: 2361 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '未对齐的内存访问检测可通过开启独立选项-CONFIG_UBSAN_ALIGNMENT检测。\n' +
        '该选项在支持未对齐访问的架构(CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS=y)\n' +
        '默认为关闭。该选项仍可通过内核配置启用，但它将产生大量的UBSAN报告。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 72, column: 1, offset: 2363 },
    end: { line: 74, column: 37, offset: 2502 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: '参考文献', position: [Object] } ],
  position: {
    start: { line: 76, column: 1, offset: 2504 },
    end: { line: 76, column: 8, offset: 2511 }
  }
}
{
  type: 'heading',
  depth: 1,
  children: [
    {
      type: 'text',
      value: 'Linux Kernel CVE Assignment',
      position: [Object]
    }
  ],
  position: {
    start: { line: 2, column: 1, offset: 1 },
    end: { line: 2, column: 30, offset: 30 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'CVEs', position: [Object] } ],
  position: {
    start: { line: 4, column: 1, offset: 32 },
    end: { line: 4, column: 8, offset: 39 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Common Vulnerabilities and Exposure(CVE®)编号是作为一种明确的方式来识别、定义和登记公开披露的安全漏洞。随着时间的推移，它们在内核项目中的实用性已经下降，CVE编号经常以不适当的方式和不适当的原因分配。因此，内核开发社区倾向于避免使用它们。然而，分配CVE和其他形式的安全标识符的持续压力，以及内核社区之外的个人和公司的持续滥用，已经清楚地表明内核社区应该控制这些CVE分配。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 6, column: 1, offset: 41 },
    end: { line: 6, column: 209, offset: 249 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Linux内核开发团队确实有能力为潜在的Linux内核安全问题分配CVE。当然,',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/process/security-bugs.rst',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '独立于内核安全漏洞报送过程。', position: [Object] }
  ],
  position: {
    start: { line: 8, column: 1, offset: 251 },
    end: { line: 8, column: 177, offset: 427 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '所有分配给Linux内核的CVE列表可以在Linux-cve邮件列表的存档中找到，如',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://lore.kernel.org/linux-cve-announce/所示。要获得分配的CVE通知，请“订阅”该邮件列表。要获得分配的CVE通知，请订阅该邮件列表：`',
      children: [Array],
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://subspace.kernel.org/subscribing.html',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '` 。', position: [Object] }
  ],
  position: {
    start: { line: 10, column: 1, offset: 429 },
    end: { line: 10, column: 183, offset: 611 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: '过程', position: [Object] } ],
  position: {
    start: { line: 12, column: 1, offset: 613 },
    end: { line: 12, column: 6, offset: 618 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '作为正常稳定发布过程的一部分，可能存在安全问题的内核更改由负责CVE编号分配的开发人员识别，并自动为其分配CVE编号。这些分配作为通告经常发布在linux-cve-announce邮件列表上。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 14, column: 1, offset: 620 },
    end: { line: 14, column: 97, offset: 716 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '注意，由于Linux内核在系统中的特殊地位，几乎任何漏洞都可能被利用来危害内核的安全性，但是当漏洞被修复后，利用的可能性通常不明显。因此，CVE分配团队过于谨慎，并将CVE编号分配给他们识别的任何漏洞修复。这就解释了为什么Linux内核团队会发布大量的CVE。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 16, column: 1, offset: 718 },
    end: { line: 16, column: 131, offset: 848 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '如果CVE分配团队错过了任何用户认为应该分配CVE的特定修复，请发送电子邮件到',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'mailto:cve@kernel.org',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: '，那里的团队将与您一起工作。请注意，不应将潜在的安全问题发送到此邮箱，它仅用于为已发布的内核树中的漏洞修复分配CVE。如果你觉得你发现了一个未修复的安全问题，请按照',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/process/security-bugs.rst',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '发送给Linux内核社区。', position: [Object] }
  ],
  position: {
    start: { line: 18, column: 1, offset: 850 },
    end: { line: 18, column: 275, offset: 1124 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Linux内核中未修复的安全问题不会自动分配CVE；只有在安全修复可用并应用于稳定内核树后，CVE分配才会自动发生，并且它将通过安全修复的Git提交编号进行跟踪。如果有人希望在提交安全修复之前分配CVE，请联系内核CVE分配团队，从他们的一批保留编号中获得相应的CVE编号。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 20, column: 1, offset: 1126 },
    end: { line: 20, column: 138, offset: 1263 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '对于目前没有得到稳定/LTS内核团队积极支持的内核版本中发现的任何问题，都不会分配CVEs。当前支持的内核分支列表可以在 ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://kernel.org/releases.html',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ' 上找到。', position: [Object] }
  ],
  position: {
    start: { line: 22, column: 1, offset: 1265 },
    end: { line: 22, column: 99, offset: 1363 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: '被分配CVE的争论', position: [Object] } ],
  position: {
    start: { line: 24, column: 1, offset: 1365 },
    end: { line: 24, column: 13, offset: 1377 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '对于为特定内核更改分配的CVE，其争论或修改的权限仅属于受影响的相关子系统的维护者。这一原则确保了漏洞报告的高度准确性和可问责性。只有那些具有深厚专业知识和对子系统深入了解的个人，才能有效评估报告漏洞的有效性和范围，并确定其适当的CVE指定策略。在此指定权限之外，争论或修改CVE的任何企图都可能导致混乱、不准确的报告，并最终危及系统。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 26, column: 1, offset: 1379 },
    end: { line: 26, column: 169, offset: 1547 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: '无效的CVE', position: [Object] } ],
  position: {
    start: { line: 28, column: 1, offset: 1549 },
    end: { line: 28, column: 10, offset: 1558 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '如果发现的安全问题存在于仅由Linux发行版支持的Linux内核中，即安全问题是由于Linux发行版所做的更改导致，或者Linux发行版内核版本不再是Linux内核社区支持的内核版本，那么Linux内核CVE团队将不能分配CVE，必须从Linux发行版本身请求。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 30, column: 1, offset: 1560 },
    end: { line: 30, column: 132, offset: 1691 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '任何由内核分配CVE团队以外的任何组针对Linux内核为积极支持的内核版本分配的CVE都不应被视为有效的CVE。请在通知内核CVE分配团队，以便他们可以通过CNA修复过程使这些条目失效。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 32, column: 1, offset: 1693 },
    end: { line: 32, column: 94, offset: 1786 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: '特定CVE的适用性', position: [Object] } ],
  position: {
    start: { line: 34, column: 1, offset: 1788 },
    end: { line: 34, column: 13, offset: 1800 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '由于Linux内核可以以许多不同的方式使用，外部用户可以通过许多不同的方式访问它，或者根本没有访问，因此任何特定CVE的适用性取决于Linux用户，而不是CVE分配团队。请不要与我们联系来确定任何特定CVE的适用性。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 36, column: 1, offset: 1802 },
    end: { line: 36, column: 109, offset: 1910 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '此外，由于源代码树非常大，而任何一个系统都只使用源代码树的一小部分，因此任何Linux用户都应该意识到，大量分配的CVEs与他们的系统无关。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 38, column: 1, offset: 1912 },
    end: { line: 38, column: 71, offset: 1982 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '简而言之，我们不知道您的用例，也不知道您使用的是内核的哪个部分，因此我们无法确定特定的CVE是否与您的系统相关。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 40, column: 1, offset: 1984 },
    end: { line: 40, column: 57, offset: 2040 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '与往常一样，最好采取所有发布的内核更改，因为它们是由许多社区成员在一个统一的整体中一起进行测试的，而不是作为个别的精选更改。还要注意，对于许多bug来说，整体问题的解决方案并不是在单个更改中找到的，而是在彼此之上的许多修复的总和。理想情况下，CVEs将被分配给所有问题的所有修复，但有时我们将无法注意到一些修复，因此某些修复可能在没有CVE的情况下被采取。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 42, column: 1, offset: 2042 },
    end: { line: 42, column: 179, offset: 2220 }
  }
}
{
  type: 'heading',
  depth: 1,
  children: [ { type: 'text', value: 'Syz-bisect', position: [Object] } ],
  position: {
    start: { line: 2, column: 1, offset: 1 },
    end: { line: 2, column: 13, offset: 13 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'inlineCode', value: 'syz-bisect', position: [Object] },
    {
      type: 'text',
      value: ' program can be used to bisect culprit and fix commits for\n' +
        'crashes found by syzkaller. It can also identify configuration options\n' +
        'that are triggers for the crash.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 4, column: 1, offset: 15 },
    end: { line: 6, column: 33, offset: 189 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Usage', position: [Object] } ],
  position: {
    start: { line: 8, column: 1, offset: 191 },
    end: { line: 8, column: 9, offset: 199 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'Build ', position: [Object] },
    { type: 'inlineCode', value: 'syz-bisect', position: [Object] },
    { type: 'text', value: ' with ', position: [Object] },
    { type: 'inlineCode', value: 'make bisect', position: [Object] },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 10, column: 1, offset: 201 },
    end: { line: 10, column: 39, offset: 239 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'During bisection different compilers depending on kernel revision are\n' +
        'used. These compilers are available\n',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://storage.googleapis.com/syzkaller/bisect_bin.tar.gz',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 12, column: 1, offset: 241 },
    end: { line: 14, column: 68, offset: 414 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Install ccache to speed up kernel compilations during bisecton.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 16, column: 1, offset: 416 },
    end: { line: 16, column: 64, offset: 479 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Create user-space (chroot) using ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '../tools/create-image.sh',
      children: [Array],
      position: [Object]
    }
  ],
  position: {
    start: { line: 18, column: 1, offset: 481 },
    end: { line: 18, column: 77, offset: 557 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Create a config file with following lines adjusted for your environment:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 20, column: 1, offset: 559 },
    end: { line: 20, column: 73, offset: 631 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '{\n' +
    '\t"bin_dir": "/home/syzkaller/bisect_bin",\n' +
    '\t"ccache": "/usr/bin/ccache",\n' +
    '\t"kernel_repo": "git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git",\n' +
    '\t"kernel_branch": "master",\n' +
    '\t"syzkaller_repo": "https://github.com/google/syzkaller",\n' +
    '\t"userspace": "/home/syzkaller/image/chroot",\n' +
    '\t"kernel_config": "/home/syzkaller/go/src/github.com/google/syzkaller/dashboard/config/linux/upstream-apparmor-kasan.config",\n' +
    '\t"kernel_baseline_config": "/home/syzkaller/go/src/github.com/google/syzkaller/dashboard/config/linux/upstream-apparmor-kasan-base.config",\n' +
    '\t"syzctl": /home/syzkaller/go/src/github.com/google/syzkaller/dashboard/config/linux/upstream.sysctl,\n' +
    '\t"cmdline": /home/syzkaller/go/src/github.com/google/syzkaller/dashboard/config/linux/upstream.cmdline,\n' +
    '\t"manager":\n' +
    '\t{\n' +
    '\t\t"name" : "bisect",\n' +
    '\t\t"target": "linux/amd64",\n' +
    '\t\t"http": "127.0.0.1:56741",\n' +
    '\t\t"workdir": "/home/syzkaller/workdir",\n' +
    '\t\t"kernel_obj": "/home/syzkaller/linux",\n' +
    '\t\t"image": "/home/syzkaller/workdir/image/image",\n' +
    '\t\t"sshkey": "/home/syzkaller/workdir/image/key",\n' +
    '\t\t"syzkaller": "/home/syzkaller/go/src/github.com/google/syzkaller_bisect",\n' +
    '\t\t"procs": 8,\n' +
    '\t\t"type": "qemu",\n' +
    '\t\t"kernel_src": "/syzkaller/linux",\n' +
    '\t\t"vm": {\n' +
    '\t\t      "count": 4,\n' +
    '\t\t      "kernel": "/home/syzkaller/linux/arch/x86/boot/bzImage",\n' +
    '\t\t      "cpu": 2,\n' +
    '\t\t      "mem": 2048,\n' +
    '\t\t      "cmdline": "root=/dev/sda1 rw console=ttyS0 kaslr crashkernel=512M minnowboard_1:eth0::: security=none"\n' +
    '\t\t}\n' +
    '\t}\n' +
    '}',
  position: {
    start: { line: 22, column: 1, offset: 633 },
    end: { line: 56, column: 4, offset: 2074 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'And run bisection with ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'bin/syz-bisect -config vm_bisect.cfg -crash\n' +
        '/syzkaller/workdir/crashes/03ee30ae11dfd0ddd062af26566c34a8c853698d',
      position: [Object]
    },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 58, column: 1, offset: 2076 },
    end: { line: 59, column: 70, offset: 2213 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'inlineCode', value: 'Syz-bisect', position: [Object] },
    {
      type: 'text',
      value: ' is expecting finding repro.cprog or repro.prog in given\n' +
        'crash directory. It will also utilize repro.opts, but it’s not\n' +
        'mandatory.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 61, column: 1, offset: 2215 },
    end: { line: 63, column: 11, offset: 2357 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [
    { type: 'text', value: 'Additional Arguments', position: [Object] }
  ],
  position: {
    start: { line: 65, column: 1, offset: 2359 },
    end: { line: 65, column: 24, offset: 2382 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'inlineCode',
      value: '-syzkaller_commit',
      position: [Object]
    },
    {
      type: 'text',
      value: ' use this if you want to use specific version of syzkaller',
      position: [Object]
    }
  ],
  position: {
    start: { line: 67, column: 1, offset: 2384 },
    end: { line: 67, column: 78, offset: 2461 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'inlineCode', value: '-kernel_commit', position: [Object] },
    {
      type: 'text',
      value: ' kernel commit where crash is known to reproduce. You\n' +
        'want to use this when bisecting fixing commit',
      position: [Object]
    }
  ],
  position: {
    start: { line: 69, column: 1, offset: 2463 },
    end: { line: 70, column: 46, offset: 2578 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'inlineCode', value: '-fix', position: [Object] },
    {
      type: 'text',
      value: ' use this if you want to bisect a fixing commit.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 72, column: 1, offset: 2580 },
    end: { line: 72, column: 55, offset: 2634 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Output', position: [Object] } ],
  position: {
    start: { line: 74, column: 1, offset: 2636 },
    end: { line: 74, column: 10, offset: 2645 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'It takes some time, but after ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syz-bisect', position: [Object] },
    {
      type: 'text',
      value: ' completes it dumps out it’s\n' +
        'results into console It also stores results into files in given crash\n' +
        'directory:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 76, column: 1, offset: 2647 },
    end: { line: 78, column: 11, offset: 2798 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'inlineCode', value: 'cause.commit', position: [Object] },
    {
      type: 'text',
      value: ' commit identified causing the crash or text “the crash\n' +
        'already happened on the oldest tested release”',
      position: [Object]
    }
  ],
  position: {
    start: { line: 80, column: 1, offset: 2800 },
    end: { line: 81, column: 47, offset: 2916 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'inlineCode', value: 'fix.commit', position: [Object] },
    {
      type: 'text',
      value: ' commit identified fixing the crash or text “the crash\n' +
        'still happens on HEAD”',
      position: [Object]
    }
  ],
  position: {
    start: { line: 83, column: 1, offset: 2918 },
    end: { line: 84, column: 23, offset: 3007 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'inlineCode', value: 'cause.config', position: [Object] },
    {
      type: 'text',
      value: ' config options identified working as one trigger for the crash',
      position: [Object]
    }
  ],
  position: {
    start: { line: 86, column: 1, offset: 3009 },
    end: { line: 86, column: 78, offset: 3086 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'inlineCode',
      value: 'original.config, baseline.config, minimized.config',
      position: [Object]
    },
    {
      type: 'text',
      value: ' config files used\nin config bisection',
      position: [Object]
    }
  ],
  position: {
    start: { line: 88, column: 1, offset: 3088 },
    end: { line: 89, column: 20, offset: 3178 }
  }
}
{
  type: 'heading',
  depth: 1,
  children: [ { type: 'text', value: 'Coverage', position: [Object] } ],
  position: {
    start: { line: 2, column: 1, offset: 1 },
    end: { line: 2, column: 11, offset: 11 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'inlineCode', value: 'syzkaller', position: [Object] },
    { type: 'text', value: ' uses ', position: [Object] },
    {
      type: 'link',
      title: null,
      url: 'https://clang.llvm.org/docs/SanitizerCoverage.html#tracing-pcs',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '\nand ', position: [Object] },
    {
      type: 'link',
      title: null,
      url: 'https://www.kernel.org/doc/html/latest/dev-tools/kcov.html',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ' for coverage collection.\nSanitizer coverage is also supported by ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'gcc', position: [Object] },
    { type: 'text', value: ' and ', position: [Object] },
    { type: 'inlineCode', value: 'KCOV', position: [Object] },
    {
      type: 'text',
      value: ' is supported by some other OSes.\nNote: ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'gVisor', position: [Object] },
    {
      type: 'text',
      value: ' coverage is completely different.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 4, column: 1, offset: 13 },
    end: { line: 7, column: 49, offset: 364 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Coverage is based on tracing ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'coverage points',
      position: [Object]
    },
    {
      type: 'text',
      value: ' inserted into the object code by the compiler.\n' +
        'A coverage point generally refers to a ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://en.wikipedia.org/wiki/Basic_block',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ' of code\nor a ', position: [Object] },
    {
      type: 'link',
      title: null,
      url: 'https://en.wikipedia.org/wiki/Control-flow_graph',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: '\n' +
        '(this depends on the compiler and instrumentation mode used during build,\n' +
        'e.g. for ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'Linux', position: [Object] },
    { type: 'text', value: ' and ', position: [Object] },
    { type: 'inlineCode', value: 'clang', position: [Object] },
    {
      type: 'text',
      value: ' the default mode is CFG edges, while for ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'gcc', position: [Object] },
    {
      type: 'text',
      value: ' the default mode is basic blocks).\n' +
        'Note that coverage points are inserted by the compiler in the middle-end after a significant number\n' +
        'of transformation and optimization passes. As the result coverage may poorly relate to the source code.\n' +
        'For example, you may see a covered line after a non-covered line, or you may not see a coverage point\n' +
        'where you would expect to see it, or vice versa (this may happen if the compiler splits basic blocks,\n' +
        'or turns control flow constructs into conditional moves without control flow, etc).\n' +
        'Assessing coverage is still generally very useful and allows to understand overall fuzzing progress,\n' +
        'but treat it with a grain of salt.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 9, column: 1, offset: 366 },
    end: { line: 20, column: 35, offset: 1442 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'See ', position: [Object] },
    {
      type: 'link',
      title: null,
      url: 'linux/coverage.md',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ' for Linux kernel specific coverage information.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 22, column: 1, offset: 1444 },
    end: { line: 22, column: 78, offset: 1521 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Web Interface', position: [Object] } ],
  position: {
    start: { line: 24, column: 1, offset: 1523 },
    end: { line: 24, column: 17, offset: 1539 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'When clicking on ', position: [Object] },
    { type: 'inlineCode', value: 'cover', position: [Object] },
    {
      type: 'text',
      value: ' link you get view showing each directory located in your kernel build directory. It’s showing either percentage number ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'X% of N', position: [Object] },
    { type: 'text', value: ' or ', position: [Object] },
    { type: 'inlineCode', value: '---', position: [Object] },
    { type: 'text', value: '. ', position: [Object] },
    { type: 'inlineCode', value: 'X% of N', position: [Object] },
    { type: 'text', value: ' means that ', position: [Object] },
    { type: 'inlineCode', value: 'X%', position: [Object] },
    { type: 'text', value: ' of ', position: [Object] },
    { type: 'inlineCode', value: 'N', position: [Object] },
    {
      type: 'text',
      value: ' coverage points are covered so far, . ',
      position: [Object]
    },
    { type: 'inlineCode', value: '---', position: [Object] },
    {
      type: 'text',
      value: ' indicates there is no coverage in that directory.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 26, column: 1, offset: 1541 },
    end: { line: 26, column: 291, offset: 1831 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Directory can be clicked and you get view on files and possible subdirectories. On each source code file there is again either ',
      position: [Object]
    },
    { type: 'inlineCode', value: '---', position: [Object] },
    {
      type: 'text',
      value: ' or coverage percentage.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 28, column: 1, offset: 1833 },
    end: { line: 28, column: 157, offset: 1989 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'If you click on any C files you will get source code view. There is certain coloring used in the source code view. Color definitions can be found in ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '/pkg/cover/report.go#L504',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: '. Coloring is described below.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 30, column: 1, offset: 1991 },
    end: { line: 30, column: 222, offset: 2212 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'If you click on percentage number of any listed source file you will get cover percentage for each function in that source file.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 32, column: 1, offset: 2214 },
    end: { line: 32, column: 129, offset: 2342 }
  }
}
{
  type: 'heading',
  depth: 3,
  children: [
    {
      type: 'text',
      value: 'Covered: black (#000000)',
      position: [Object]
    }
  ],
  position: {
    start: { line: 34, column: 1, offset: 2344 },
    end: { line: 34, column: 29, offset: 2372 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'All PC values associated to that line are covered. There is number on the left side indicating how many programs have triggered executing the PC values associated to this line. You can click on that number and it will open last executed program. Example below shows how single line which is fully covered is shown.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 36, column: 1, offset: 2374 },
    end: { line: 36, column: 315, offset: 2688 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'image',
      title: null,
      url: 'coverage_covered.png?raw=true',
      alt: 'Code line is fully covered',
      position: [Object]
    }
  ],
  position: {
    start: { line: 38, column: 1, offset: 2690 },
    end: { line: 38, column: 61, offset: 2750 }
  }
}
{
  type: 'heading',
  depth: 3,
  children: [
    {
      type: 'text',
      value: 'Both: orange (#c86400)',
      position: [Object]
    }
  ],
  position: {
    start: { line: 40, column: 1, offset: 2752 },
    end: { line: 40, column: 27, offset: 2778 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'There are several PC values associated to the line and not all of these are executed. Again there is number left to the source code line that can clicked to open last program triggering associated PC values. Example below shows single line which has both executed and non-executed PC values associated to it.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 42, column: 1, offset: 2780 },
    end: { line: 42, column: 309, offset: 3088 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'image',
      title: null,
      url: 'coverage_both.png?raw=true',
      alt: 'Code line has executed and not executed PC values',
      position: [Object]
    }
  ],
  position: {
    start: { line: 44, column: 1, offset: 3090 },
    end: { line: 44, column: 81, offset: 3170 }
  }
}
{
  type: 'heading',
  depth: 3,
  children: [
    {
      type: 'text',
      value: 'Weak-uncovered: crimson red (#c80000)',
      position: [Object]
    }
  ],
  position: {
    start: { line: 46, column: 1, offset: 3172 },
    end: { line: 46, column: 43, offset: 3214 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Function (symbol) this line is in doesn’t have any coverage. I.e. the function is not executed at all. Please note that if compiler have optimized certain symbol out and made the code inline instead symbol associated with this line is the one where the code is compiled into. This makes it sometimes real hard to figure out meaning of coloring. Example below shows how single line which is uncovered and PC values associated to it are in function(s) that are not executed either is shown.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 48, column: 1, offset: 3216 },
    end: { line: 48, column: 489, offset: 3704 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'image',
      title: null,
      url: 'coverage_weak-uncovered.png?raw=true',
      alt: 'PC values associated to the line are not executed and these PC values are in functions that are not executed either',
      position: [Object]
    }
  ],
  position: {
    start: { line: 50, column: 1, offset: 3706 },
    end: { line: 50, column: 157, offset: 3862 }
  }
}
{
  type: 'heading',
  depth: 3,
  children: [
    {
      type: 'text',
      value: 'Uncovered: red (#ff0000)',
      position: [Object]
    }
  ],
  position: {
    start: { line: 52, column: 1, offset: 3864 },
    end: { line: 52, column: 29, offset: 3892 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Line is uncovered. Function (symbol) this line is in is executed and one of the PC values associated to this line. Example below shows how single line which is not covered is shown.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 54, column: 1, offset: 3894 },
    end: { line: 54, column: 182, offset: 4075 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'image',
      title: null,
      url: 'coverage_uncovered.png?raw=true',
      alt: 'Code line has no executed PC values associated. Function it is in is executed',
      position: [Object]
    }
  ],
  position: {
    start: { line: 56, column: 1, offset: 4077 },
    end: { line: 56, column: 114, offset: 4190 }
  }
}
{
  type: 'heading',
  depth: 3,
  children: [
    {
      type: 'text',
      value: 'Not instrumented: grey (#505050)',
      position: [Object]
    }
  ],
  position: {
    start: { line: 58, column: 1, offset: 4192 },
    end: { line: 58, column: 37, offset: 4228 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'PC values associated to the line are not instrumented or source line doesn’t generate code at all. Example below shows how all not instrumented code is shown.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 60, column: 1, offset: 4230 },
    end: { line: 60, column: 159, offset: 4388 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'image',
      title: null,
      url: 'coverage_not_instrumented.png?raw=true',
      alt: 'Not instrumented code lines',
      position: [Object]
    }
  ],
  position: {
    start: { line: 62, column: 1, offset: 4390 },
    end: { line: 62, column: 71, offset: 4460 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'syz-cover', position: [Object] } ],
  position: {
    start: { line: 64, column: 1, offset: 4462 },
    end: { line: 64, column: 13, offset: 4474 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'There is small utility in syzkaller repository to generate coverage report based on raw coverage data. This is available in ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '/tools/syz-cover',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ' and can be built by:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 66, column: 1, offset: 4476 },
    end: { line: 66, column: 175, offset: 4650 }
  }
}
{
  type: 'code',
  lang: 'bash',
  meta: null,
  value: 'GOOS=linux GOARCH=amd64 go build "-ldflags=-s -w" -o ./bin/syz-cover github.com/google/syzkaller/tools/syz-cover',
  position: {
    start: { line: 68, column: 1, offset: 4652 },
    end: { line: 70, column: 4, offset: 4777 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Raw coverage data can be obtained from running ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syz-manager', position: [Object] },
    { type: 'text', value: ' by:', position: [Object] }
  ],
  position: {
    start: { line: 72, column: 1, offset: 4779 },
    end: { line: 72, column: 65, offset: 4843 }
  }
}
{
  type: 'code',
  lang: 'bash',
  meta: null,
  value: 'wget http://localhost:<your syz-manager port>/rawcover',
  position: {
    start: { line: 74, column: 1, offset: 4845 },
    end: { line: 76, column: 4, offset: 4912 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Now this raw cover data can be fed to ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syz-cover', position: [Object] },
    {
      type: 'text',
      value: ' to generate coverage report:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 78, column: 1, offset: 4914 },
    end: { line: 78, column: 79, offset: 4992 }
  }
}
{
  type: 'code',
  lang: 'bash',
  meta: null,
  value: './bin/syz-cover --config <location of your syzkaller config> rawcover',
  position: {
    start: { line: 80, column: 1, offset: 4994 },
    end: { line: 82, column: 4, offset: 5076 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'You can also export CSV file containing function coverage by:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 84, column: 1, offset: 5078 },
    end: { line: 84, column: 62, offset: 5139 }
  }
}
{
  type: 'code',
  lang: 'bash',
  meta: null,
  value: './bin/syz-cover --config <location of your syzkaller config> --csv <filename where to export>  rawcover',
  position: {
    start: { line: 86, column: 1, offset: 5141 },
    end: { line: 88, column: 4, offset: 5257 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'You can export a JSON file containing line coverage info by:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 90, column: 1, offset: 5259 },
    end: { line: 90, column: 61, offset: 5319 }
  }
}
{
  type: 'code',
  lang: 'bash',
  meta: null,
  value: './bin/syz-cover --config <location of your syzkaller config> --json <filename where to export>  rawcover',
  position: {
    start: { line: 92, column: 1, offset: 5321 },
    end: { line: 94, column: 4, offset: 5437 }
  }
}
{
  type: 'heading',
  depth: 1,
  children: [ { type: 'text', value: '运行 syzkaller 程序', position: [Object] } ],
  position: {
    start: { line: 2, column: 1, offset: 1 },
    end: { line: 2, column: 18, offset: 18 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '本文描述了如何执行现有的 syzkaller 程序用以复现 bug。通过这种方式，你可以重放一个单独的程序或一个包含多个程序的完整执行日志。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 4, column: 1, offset: 20 },
    end: { line: 4, column: 71, offset: 90 }
  }
}
{
  type: 'list',
  ordered: true,
  start: 1,
  spread: false,
  children: [
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    }
  ],
  position: {
    start: { line: 6, column: 1, offset: 92 },
    end: { line: 7, column: 65, offset: 188 }
  }
}
{
  type: 'code',
  lang: 'bash',
  meta: null,
  value: 'export GOROOT=$HOME/goroot\nexport GOPATH=$HOME/gopath',
  position: {
    start: { line: 8, column: 1, offset: 189 },
    end: { line: 11, column: 4, offset: 255 }
  }
}
{
  type: 'list',
  ordered: true,
  start: 2,
  spread: false,
  children: [
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    }
  ],
  position: {
    start: { line: 13, column: 1, offset: 257 },
    end: { line: 13, column: 20, offset: 276 }
  }
}
{
  type: 'code',
  lang: 'bash',
  meta: null,
  value: 'git clone https://github.com/google/syzkaller',
  position: {
    start: { line: 14, column: 1, offset: 277 },
    end: { line: 16, column: 4, offset: 335 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '请注意，你的 syzkaller 版本必须和生成待执行程序的 syzkaller 版本一致。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 18, column: 1, offset: 337 },
    end: { line: 18, column: 47, offset: 383 }
  }
}
{
  type: 'list',
  ordered: true,
  start: 3,
  spread: false,
  children: [
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    }
  ],
  position: {
    start: { line: 20, column: 1, offset: 385 },
    end: { line: 20, column: 26, offset: 410 }
  }
}
{
  type: 'code',
  lang: 'bash',
  meta: null,
  value: 'cd syzkaller\nmake',
  position: {
    start: { line: 21, column: 1, offset: 411 },
    end: { line: 24, column: 4, offset: 441 }
  }
}
{
  type: 'list',
  ordered: true,
  start: 4,
  spread: false,
  children: [
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    }
  ],
  position: {
    start: { line: 26, column: 1, offset: 443 },
    end: { line: 26, column: 56, offset: 498 }
  }
}
{
  type: 'code',
  lang: 'bash',
  meta: null,
  value: 'scp -P 10022 -i bullseye.img.key bin/linux_amd64/syz-execprog bin/linux_amd64/syz-executor program root@localhost:',
  position: {
    start: { line: 27, column: 1, offset: 499 },
    end: { line: 29, column: 4, offset: 626 }
  }
}
{
  type: 'list',
  ordered: true,
  start: 5,
  spread: false,
  children: [
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    }
  ],
  position: {
    start: { line: 31, column: 1, offset: 628 },
    end: { line: 31, column: 15, offset: 642 }
  }
}
{
  type: 'code',
  lang: 'bash',
  meta: null,
  value: './syz-execprog -repeat=0 -procs=8 program',
  position: {
    start: { line: 32, column: 1, offset: 643 },
    end: { line: 34, column: 4, offset: 697 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: '下面是几个实用的 ', position: [Object] },
    { type: 'inlineCode', value: 'syz-execprog', position: [Object] },
    { type: 'text', value: ' 参数：', position: [Object] }
  ],
  position: {
    start: { line: 36, column: 1, offset: 699 },
    end: { line: 36, column: 29, offset: 727 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '  -procs int\n' +
    '      执行程序的并发进程数（默认值为 1）\n' +
    '  -repeat int\n' +
    '      重复执行的次数（0 代表无限执行）（默认值为 1）\n' +
    '  -sandbox string\n' +
    '      模糊测试的沙盒模式（none/setuid/namespace）（默认为 "setuid" 模式）\n' +
    '  -threaded\n' +
    '      是否使用线程模式（默认为 是）',
  position: {
    start: { line: 37, column: 1, offset: 728 },
    end: { line: 46, column: 4, offset: 927 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'inlineCode', value: '-threaded=0', position: [Object] },
    {
      type: 'text',
      value: ' 参数将会使程序作为一个简单的单线程系统调用序列来执行；\n而 ',
      position: [Object]
    },
    { type: 'inlineCode', value: '-threaded=1', position: [Object] },
    {
      type: 'text',
      value: ' 强制每个系统调用使用单独的线程，这样就可以在阻塞的系统调用上继续执行。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 48, column: 1, offset: 929 },
    end: { line: 49, column: 52, offset: 1022 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '而较老版本的 syzkaller 还有如下参数：',
      position: [Object]
    }
  ],
  position: {
    start: { line: 51, column: 1, offset: 1024 },
    end: { line: 51, column: 25, offset: 1048 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '  -collide\n      是否使用冲突系统调用以引发数据竞争（默认为是）',
  position: {
    start: { line: 52, column: 1, offset: 1049 },
    end: { line: 55, column: 4, offset: 1097 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'inlineCode', value: '-collide=1', position: [Object] },
    {
      type: 'text',
      value: ' 参数的作用是当很多系统调用并发执行时，强制执行第二轮系统调用。\n当你使用较老版本的复现程序时，可能需要用到这个参数。',
      position: [Object]
    }
  ],
  position: {
    start: { line: 56, column: 1, offset: 1098 },
    end: { line: 57, column: 27, offset: 1169 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '如果想要重放一个开头包含如下内容的复现程序：',
      position: [Object]
    }
  ],
  position: {
    start: { line: 59, column: 1, offset: 1171 },
    end: { line: 59, column: 23, offset: 1193 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '# {Threaded:true Repeat:true RepeatTimes:0 Procs:8 Slowdown:1 Sandbox:none Leak:false NetInjection:true NetDevices:true NetReset:true Cgroups:true BinfmtMisc:true CloseFDs:true KCSAN:false DevlinkPCI:false USB:true VhciInjection:true Wifi:true IEEE802154:true Sysctl:true UseTmpDir:true HandleSegv:true Repro:false Trace:false LegacyOptions:{Collide:false Fault:false FaultCall:0 FaultNth:0}}',
  position: {
    start: { line: 60, column: 1, offset: 1194 },
    end: { line: 62, column: 4, offset: 1594 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: '你需要基于文件头中的值调整对应的参数。其中，',
      position: [Object]
    },
    { type: 'inlineCode', value: 'Threaded', position: [Object] },
    { type: 'text', value: '/', position: [Object] },
    { type: 'inlineCode', value: 'Procs', position: [Object] },
    { type: 'text', value: '/', position: [Object] },
    { type: 'inlineCode', value: 'Sandbox', position: [Object] },
    { type: 'text', value: ' 与 ', position: [Object] },
    { type: 'inlineCode', value: '-threaded', position: [Object] },
    { type: 'text', value: '/', position: [Object] },
    { type: 'inlineCode', value: '-procs', position: [Object] },
    { type: 'text', value: '/', position: [Object] },
    { type: 'inlineCode', value: '-sandbox', position: [Object] },
    { type: 'text', value: ' 参数对应。如果 ', position: [Object] },
    { type: 'inlineCode', value: 'Repeat', position: [Object] },
    { type: 'text', value: ' 的值为 ', position: [Object] },
    { type: 'inlineCode', value: 'true', position: [Object] },
    { type: 'text', value: '，则在 ', position: [Object] },
    { type: 'inlineCode', value: 'syz-execprog', position: [Object] },
    { type: 'text', value: ' 的参数中添加 ', position: [Object] },
    { type: 'inlineCode', value: '-repeat=0', position: [Object] },
    { type: 'text', value: '。', position: [Object] }
  ],
  position: {
    start: { line: 63, column: 1, offset: 1595 },
    end: { line: 63, column: 151, offset: 1745 }
  }
}
{
  type: 'heading',
  depth: 1,
  children: [
    { type: 'text', value: 'How syzkaller works', position: [Object] }
  ],
  position: {
    start: { line: 2, column: 1, offset: 1 },
    end: { line: 2, column: 22, offset: 22 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Generic description of how syzkaller works are ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'internals.md#overview',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 4, column: 1, offset: 24 },
    end: { line: 4, column: 79, offset: 102 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Linux kernel specific internals can be found ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'linux/internals.md',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 6, column: 1, offset: 104 },
    end: { line: 6, column: 73, offset: 176 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Overview', position: [Object] } ],
  position: {
    start: { line: 8, column: 1, offset: 178 },
    end: { line: 8, column: 12, offset: 189 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The process structure for the syzkaller system is shown in the following diagram;\n' +
        'red labels indicate corresponding configuration options.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 10, column: 1, offset: 191 },
    end: { line: 11, column: 57, offset: 329 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'image',
      title: null,
      url: 'process_structure.png?raw=true',
      alt: 'Process structure for syzkaller',
      position: [Object]
    }
  ],
  position: {
    start: { line: 13, column: 1, offset: 331 },
    end: { line: 13, column: 67, offset: 397 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'The ', position: [Object] },
    { type: 'inlineCode', value: 'syz-manager', position: [Object] },
    {
      type: 'text',
      value: ' process starts, monitors and restarts several VM instances, and starts a ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syz-fuzzer', position: [Object] },
    {
      type: 'text',
      value: ' process inside of the VMs.\n',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syz-manager', position: [Object] },
    {
      type: 'text',
      value: ' is responsible for persistent corpus and crash storage.\n' +
        'It runs on a host with stable kernel which does not experience white-noise fuzzer load.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 15, column: 1, offset: 399 },
    end: { line: 17, column: 88, offset: 687 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'The ', position: [Object] },
    { type: 'inlineCode', value: 'syz-fuzzer', position: [Object] },
    {
      type: 'text',
      value: ' process runs inside of presumably unstable VMs.\nThe ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syz-fuzzer', position: [Object] },
    {
      type: 'text',
      value: ' guides fuzzing process (input generation, mutation, minimization, etc.) and sends inputs that trigger new coverage back to the ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syz-manager', position: [Object] },
    {
      type: 'text',
      value: ' process via RPC.\nIt also starts transient ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syz-executor', position: [Object] },
    { type: 'text', value: ' processes.', position: [Object] }
  ],
  position: {
    start: { line: 19, column: 1, offset: 689 },
    end: { line: 21, column: 51, offset: 979 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'Each ', position: [Object] },
    { type: 'inlineCode', value: 'syz-executor', position: [Object] },
    {
      type: 'text',
      value: ' process executes a single input (a sequence of syscalls).\n' +
        'It accepts the program to execute from the ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syz-fuzzer', position: [Object] },
    {
      type: 'text',
      value: ' process and sends results back.\n' +
        'It is designed to be as simple as possible (to not interfere with fuzzing process), written in C++, compiled as static binary and uses shared memory for communication.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 23, column: 1, offset: 981 },
    end: { line: 25, column: 168, offset: 1314 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [
    { type: 'text', value: 'Syscall descriptions', position: [Object] }
  ],
  position: {
    start: { line: 27, column: 1, offset: 1316 },
    end: { line: 27, column: 24, offset: 1339 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'The ', position: [Object] },
    { type: 'inlineCode', value: 'syz-fuzzer', position: [Object] },
    {
      type: 'text',
      value: ' process generates programs to be executed by ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syz-executor', position: [Object] },
    {
      type: 'text',
      value: ' based on syscall descriptions described ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'syscall_descriptions.md',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 29, column: 1, offset: 1341 },
    end: { line: 29, column: 150, offset: 1490 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Coverage', position: [Object] } ],
  position: {
    start: { line: 31, column: 1, offset: 1492 },
    end: { line: 31, column: 12, offset: 1503 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Syzkaller is a coverage-guided fuzzer. The details about coverage collection can be found ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'coverage.md',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 33, column: 1, offset: 1505 },
    end: { line: 33, column: 111, offset: 1615 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Crash reports', position: [Object] } ],
  position: {
    start: { line: 35, column: 1, offset: 1617 },
    end: { line: 35, column: 17, offset: 1633 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'When ', position: [Object] },
    { type: 'inlineCode', value: 'syzkaller', position: [Object] },
    {
      type: 'text',
      value: ' finds a crasher, it saves information about it into ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'workdir/crashes',
      position: [Object]
    },
    {
      type: 'text',
      value: ' directory.\n' +
        'The directory contains one subdirectory per unique crash type.\n' +
        'Each subdirectory contains a ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'description', position: [Object] },
    {
      type: 'text',
      value: ' file with a unique string identifying the crash (intended for bug identification and deduplication);\n' +
        'and up to 100 ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'logN', position: [Object] },
    { type: 'text', value: ' and ', position: [Object] },
    { type: 'inlineCode', value: 'reportN', position: [Object] },
    {
      type: 'text',
      value: ' files, one pair per test machine crash:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 37, column: 1, offset: 1635 },
    end: { line: 40, column: 75, offset: 2014 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: ' - crashes/\n' +
    '   - 6e512290efa36515a7a27e53623304d20d1c3e\n' +
    '     - description\n' +
    '     - log0\n' +
    '     - report0\n' +
    '     - log1\n' +
    '     - report1\n' +
    '     ...\n' +
    '   - 77c578906abe311d06227b9dc3bffa4c52676f\n' +
    '     - description\n' +
    '     - log0\n' +
    '     - report0\n' +
    '     ...',
  position: {
    start: { line: 41, column: 1, offset: 2015 },
    end: { line: 55, column: 4, offset: 2259 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Descriptions are extracted using a set of ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '/pkg/report/',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: '.\n' +
        'This set may need to be extended if you are using a different kernel architecture, or are just seeing a previously unseen kernel error messages.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 57, column: 1, offset: 2261 },
    end: { line: 58, column: 145, offset: 2484 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'inlineCode', value: 'logN', position: [Object] },
    { type: 'text', value: ' files contain raw ', position: [Object] },
    { type: 'inlineCode', value: 'syzkaller', position: [Object] },
    {
      type: 'text',
      value: ' logs and include kernel console output as well as programs executed before the crash.\n' +
        'These logs can be fed to ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syz-repro', position: [Object] },
    { type: 'text', value: ' tool for ', position: [Object] },
    {
      type: 'link',
      title: null,
      url: 'reproducing_crashes.md',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ',\nor to ', position: [Object] },
    { type: 'inlineCode', value: 'syz-execprog', position: [Object] },
    { type: 'text', value: ' tool for ', position: [Object] },
    {
      type: 'link',
      title: null,
      url: 'executing_syzkaller_programs.md',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '.\n', position: [Object] },
    { type: 'inlineCode', value: 'reportN', position: [Object] },
    {
      type: 'text',
      value: ' files contain post-processed and symbolized kernel crash reports (e.g. a KASAN report).\n' +
        'Normally you need just 1 pair of these files (i.e. ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'log0', position: [Object] },
    { type: 'text', value: ' and ', position: [Object] },
    { type: 'inlineCode', value: 'report0', position: [Object] },
    {
      type: 'text',
      value: '), because they all presumably describe the same kernel bug.\nHowever, ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syzkaller', position: [Object] },
    {
      type: 'text',
      value: ' saves up to 100 of them for the case when the crash is poorly reproducible, or if you just want to look at a set of crash reports to infer some similarities or differences.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 60, column: 1, offset: 2486 },
    end: { line: 65, column: 194, offset: 3223 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'There are 3 special types of crashes:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 67, column: 1, offset: 3225 },
    end: { line: 67, column: 38, offset: 3262 }
  }
}
{
  type: 'list',
  ordered: false,
  start: null,
  spread: false,
  children: [
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    }
  ],
  position: {
    start: { line: 68, column: 2, offset: 3264 },
    end: { line: 70, column: 129, offset: 3568 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Most likely you won’t see ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'reportN', position: [Object] },
    {
      type: 'text',
      value: ' files for these crashes (e.g. if there is no output from the test machine, there is nothing to put into report).\n' +
        'Sometimes these crashes indicate a bug in ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syzkaller', position: [Object] },
    {
      type: 'text',
      value: ' itself (especially if you see a Go panic message in the logs).\n' +
        'However, frequently they mean a kernel lockup or something similarly bad (here are just a few examples of bugs found this way:\n',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://groups.google.com/d/msg/syzkaller/zfuHHRXL7Zg/Tc5rK8bdCAAJ',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ',\n', position: [Object] },
    {
      type: 'link',
      title: null,
      url: 'https://groups.google.com/d/msg/syzkaller/kY_ml6TCm9A/wDd5fYFXBQAJ',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ',\n', position: [Object] },
    {
      type: 'link',
      title: null,
      url: 'https://groups.google.com/d/msg/syzkaller/OM7CXieBCoY/etzvFPX3AQAJ',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ').', position: [Object] }
  ],
  position: {
    start: { line: 72, column: 1, offset: 3570 },
    end: { line: 77, column: 74, offset: 4182 }
  }
}
{
  type: 'heading',
  depth: 1,
  children: [ { type: 'text', value: 'Program syntax', position: [Object] } ],
  position: {
    start: { line: 2, column: 1, offset: 1 },
    end: { line: 2, column: 17, offset: 17 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Syzkaller uses a compact domain-specific language (DSL) for programs\n' +
        'to log executed programs, test its code, and persist programs in the\n' +
        'corpus. This page provides a brief description of the corresponding\n' +
        'syntax. Some useful information can also be found in the\n',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '/sys/linux/test',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ' and in the program\n',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '/prog/encoding.go',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 4, column: 1, offset: 19 },
    end: { line: 9, column: 43, offset: 380 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Together with execution options, the DSL provides everything that\n' +
        'syz-executor needs to run a program.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 11, column: 1, offset: 382 },
    end: { line: 12, column: 37, offset: 484 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'For example, consider the program:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 14, column: 1, offset: 486 },
    end: { line: 14, column: 35, offset: 520 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'r0 = syz_open_dev$loop(&(0x7f00000011c0), 0x0, 0x0)\n' +
    'r1 = openat$6lowpan_control(0xffffffffffffff9c, &(0x7f00000000c0), 0x2, 0x0)\n' +
    'ioctl$LOOP_SET_FD(r0, 0x4c00, r1)',
  position: {
    start: { line: 15, column: 1, offset: 521 },
    end: { line: 19, column: 4, offset: 691 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Each line in this program describes a particular syscall invocation,\n' +
        'with the first two calls saving the result in temporary variables ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'r0', position: [Object] },
    { type: 'text', value: '\nand ', position: [Object] },
    { type: 'inlineCode', value: 'r1', position: [Object] },
    {
      type: 'text',
      value: ', which are passed to the third call.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 21, column: 1, offset: 693 },
    end: { line: 23, column: 46, offset: 878 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'line = assignment | call\n' +
    'assignment = variable " = " call\n' +
    'call = syscall-name "(" [arg ["," arg]*] ")"  ["(" [call-prop ["," call-prop*] ")"]\n' +
    'arg = "nil" | "AUTO" | const-arg | resource-arg | result-arg | pointer-arg | string-arg | struct-arg | array-arg | union-arg\n' +
    'const-arg = "0x" hex-integer\n' +
    'resource-arg = variable ["/" hex-integer] ["+" hex-integer]\n' +
    'result-arg = "<" variable "=>" arg\n' +
    'pointer-arg = "&" pointer-arg-addr ["=ANY"] "=" arg\n' +
    'pointer-arg-addr = "AUTO" | "(" pointer-addr ["/" region-size] ")"\n' +
    `string-arg = "'" escaped-string "'" | "\\"" escaped-string "\\"" | "\\"$" escaped-string "\\""\n` +
    'struct-arg =  "{" [arg ["," arg]*] "}"\n' +
    'array-arg = "[" [arg ["," arg]*] "]"\n' +
    'union-arg = "@" field-name ["=" arg]\n' +
    'call-prop = prop-name ": " prop-value\n' +
    'variable = "r" dec-integer\n' +
    'pointer-addr = hex-integer\n' +
    'region-size = hex-integer',
  position: {
    start: { line: 25, column: 1, offset: 880 },
    end: { line: 43, column: 4, offset: 1719 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Programs may also contain blank lines and comments.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 45, column: 1, offset: 1721 },
    end: { line: 45, column: 52, offset: 1772 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '# Obtain a file handle\n' +
    "r0 = openat(0xffffffffffffff9c, &AUTO='./file1\\x00', 0x42, 0x1ff)\n" +
    '\n' +
    '# Perform a write operation\n' +
    'write(r0, &AUTO="01010101", 0x4)',
  position: {
    start: { line: 46, column: 1, offset: 1773 },
    end: { line: 52, column: 4, offset: 1931 }
  }
}
{
  type: 'heading',
  depth: 3,
  children: [ { type: 'text', value: 'Memory management', position: [Object] } ],
  position: {
    start: { line: 54, column: 1, offset: 1933 },
    end: { line: 54, column: 22, offset: 1954 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Memory management is performed by syzkaller itself. It will allocate\n' +
        'virtual memory regions of the necessary size and set the final values\n' +
        'of pointer arguments.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 56, column: 1, offset: 1956 },
    end: { line: 58, column: 22, offset: 2116 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'By using the ', position: [Object] },
    { type: 'inlineCode', value: 'AUTO', position: [Object] },
    {
      type: 'text',
      value: ' keyword, programs can give syzkaller the full\n' +
        'control over storing the data. This may be convenient e.g. when a\n' +
        'parameter must be passed by reference, but the exact location of its\n' +
        'value is not of particular importance.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 60, column: 1, offset: 2118 },
    end: { line: 63, column: 39, offset: 2357 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: "r1 = syz_genetlink_get_family_id$nl80211(&AUTO='nl80211\\x00', 0xffffffffffffffff)\n" +
    "ioctl$sock_SIOCGIFINDEX_80211(r0, 0x8933, &AUTO={'wlan0\\x00', <r2=>0x0})",
  position: {
    start: { line: 65, column: 1, offset: 2359 },
    end: { line: 68, column: 4, offset: 2521 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Alternatively, some data can be “anchored” to specific addresses. It\n' +
        'may be especially important when a memory region must be shared\n' +
        'between multiple calls.  In this case, pointer addresses must be given\n' +
        'at the 0x7f0000000000 offset. Before the actual execution, syzkaller\n' +
        'will adjust pointers to the start of the actual mmap’ed region.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 70, column: 1, offset: 2523 },
    end: { line: 74, column: 64, offset: 2859 }
  }
}
{
  type: 'heading',
  depth: 3,
  children: [ { type: 'text', value: 'Call properties', position: [Object] } ],
  position: {
    start: { line: 76, column: 1, offset: 2861 },
    end: { line: 76, column: 20, offset: 2880 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Call properties specify extra information about how a specific call\n' +
        'must be executed. Each call within a program has its own set of call\n' +
        'properties. If no properties are provided, syzkaller takes the default\n' +
        'ones.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 78, column: 1, offset: 2882 },
    end: { line: 81, column: 6, offset: 3095 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Currently, syzkaller supports the following call properties.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 83, column: 1, offset: 3097 },
    end: { line: 83, column: 61, offset: 3157 }
  }
}
{
  type: 'heading',
  depth: 4,
  children: [ { type: 'text', value: 'Fault injection', position: [Object] } ],
  position: {
    start: { line: 85, column: 1, offset: 3159 },
    end: { line: 85, column: 21, offset: 3179 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'Syntax: ', position: [Object] },
    { type: 'inlineCode', value: 'fail_nth: N', position: [Object] },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 86, column: 1, offset: 3180 },
    end: { line: 86, column: 23, offset: 3202 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'It takes an integer (base 10) argument ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'N', position: [Object] },
    {
      type: 'text',
      value: '. If the argument is\nnon-negative, a fault will be injected into the ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'N', position: [Object] },
    { type: 'text', value: '-th occasion.', position: [Object] }
  ],
  position: {
    start: { line: 88, column: 1, offset: 3204 },
    end: { line: 89, column: 65, offset: 3331 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'r0 = openat$6lowpan_control(0xffffffffffffff9c, &(0x7f00000000c0), 0x2, 0x0)\n' +
    'ioctl$LOOP_SET_FD(r0, 0x4c00, r0) (fail_nth: 5)',
  position: {
    start: { line: 91, column: 1, offset: 3333 },
    end: { line: 94, column: 4, offset: 3465 }
  }
}
{
  type: 'heading',
  depth: 4,
  children: [ { type: 'text', value: 'Async', position: [Object] } ],
  position: {
    start: { line: 96, column: 1, offset: 3467 },
    end: { line: 96, column: 11, offset: 3477 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'Syntax: ', position: [Object] },
    { type: 'inlineCode', value: 'async', position: [Object] },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 97, column: 1, offset: 3478 },
    end: { line: 97, column: 17, offset: 3494 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'Instructs ', position: [Object] },
    { type: 'inlineCode', value: 'syz-executor', position: [Object] },
    {
      type: 'text',
      value: ' not to wait until the call completes and\n' +
        'to proceed immediately to the next call.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 99, column: 1, offset: 3496 },
    end: { line: 100, column: 41, offset: 3602 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: "r0 = openat(0xffffffffffffff9c, &AUTO='./file1\\x00', 0x42, 0x1ff)\n" +
    'write(r0, &AUTO="01010101", 0x4) (async)\n' +
    'read(r0, &AUTO=""/4, 0x4)\n' +
    'close(r0)',
  position: {
    start: { line: 102, column: 1, offset: 3604 },
    end: { line: 107, column: 4, offset: 3754 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'When setting ', position: [Object] },
    { type: 'inlineCode', value: 'async', position: [Object] },
    {
      type: 'text',
      value: ' flags be aware of the following considerations:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 109, column: 1, offset: 3756 },
    end: { line: 109, column: 69, offset: 3824 }
  }
}
{
  type: 'list',
  ordered: false,
  start: null,
  spread: false,
  children: [
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    }
  ],
  position: {
    start: { line: 110, column: 1, offset: 3825 },
    end: { line: 116, column: 46, offset: 4261 }
  }
}
{
  type: 'heading',
  depth: 1,
  children: [ { type: 'text', value: 'Pseudo-syscalls', position: [Object] } ],
  position: {
    start: { line: 2, column: 1, offset: 1 },
    end: { line: 2, column: 18, offset: 18 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Besides regular system calls, a ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'syscall_descriptions.md',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ' file can also contain\n' +
        'pseudo-syscalls. These are C functions defined in the\n' +
        'executor. When a test program uses a pseudo-syscall, the executor\n' +
        'will generate the pseudo-syscall function code in the resulting C program.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 4, column: 1, offset: 20 },
    end: { line: 8, column: 75, offset: 315 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'This allows a test program to have specific code blocks to perform\n' +
        'certain actions, they may also be used as more test-friendly wrappers\n' +
        'for primitive syscalls.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 10, column: 1, offset: 317 },
    end: { line: 12, column: 24, offset: 477 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Use of pseudo-syscalls is generally ',
      position: [Object]
    },
    { type: 'strong', children: [Array], position: [Object] },
    {
      type: 'text',
      value: ' because they ruin all\n' +
        'advantages of the declarative descriptions (declarativeness, conciseness,\n' +
        'fuzzer control over all aspects, possibility of global improvements to\n' +
        'the logic, static checking, fewer bugs, etc), increase maintenance burden,\n' +
        'are non-reusable and make C reproducers longer. However, syzlang is not\n' +
        'expressive enough to cover all possible cases, so use of pseudo-syscalls\n' +
        'needs to be considered on a case-by-cases basis (additional benefit,\n' +
        'amount of code, possibility of extending syzlang to cover this case, etc).',
      position: [Object]
    }
  ],
  position: {
    start: { line: 14, column: 1, offset: 479 },
    end: { line: 21, column: 75, offset: 1061 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [
    {
      type: 'text',
      value: 'How to add a pseudo-syscall to the executor',
      position: [Object]
    }
  ],
  position: {
    start: { line: 23, column: 1, offset: 1063 },
    end: { line: 23, column: 47, offset: 1109 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'First, think about the scope of the pseudo-syscall and which systems and\n' +
        'subsystems it will be related to. The executor includes a fixed set of C\n' +
        'header files containing the code of the pseudo-syscalls. Check if the\n' +
        'new one can fit in one of the existing files before creating a new\n' +
        'one. These header files are defined in ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '../pkg/csource/gen.go',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ':', position: [Object] }
  ],
  position: {
    start: { line: 25, column: 1, offset: 1111 },
    end: { line: 29, column: 72, offset: 1465 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'executorFilenames := []string{\n' +
    '        "common_linux.h",\n' +
    '        "common_akaros.h",\n' +
    '        "common_bsd.h",\n' +
    '        "common_fuchsia.h",\n' +
    '        "common_windows.h",\n' +
    '        "common_test.h",\n' +
    '        "common_kvm_amd64.h",\n' +
    '        "common_kvm_arm64.h",\n' +
    '        "common_usb_linux.h",\n' +
    '        "common_usb_netbsd.h",\n' +
    '        "common_usb.h",\n' +
    '        "android/android_seccomp.h",\n' +
    '        "kvm.h",\n' +
    '        "kvm_amd64.S.h",\n' +
    '}',
  position: {
    start: { line: 31, column: 1, offset: 1467 },
    end: { line: 46, column: 6, offset: 1945 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'For instance, if our new pseudo-syscall is Linux-specific, then\n',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '../executor/common_linux.h',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ' would be the place to put it.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 48, column: 1, offset: 1947 },
    end: { line: 49, column: 75, offset: 2085 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The actual pseudo-syscall function may look something like this:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 51, column: 1, offset: 2087 },
    end: { line: 51, column: 65, offset: 2151 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '#if SYZ_EXECUTOR || __NR_syz_mycall\n' +
    '/* Add all the necessary #include and #define headers */\n' +
    '\n' +
    'static long syz_mycall(volatile long a0, volatile long a1)\n' +
    '{\n' +
    '        /* Function body */\n' +
    '}\n' +
    '#endif',
  position: {
    start: { line: 53, column: 1, offset: 2153 },
    end: { line: 60, column: 11, offset: 2372 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Make sure that all the function requirements are met and that it can\n' +
        'be compiled. Note that the function name must start with “syz_“. It may\n' +
        'also take a different number of arguments. Type of arguments must be\n',
      position: [Object]
    },
    { type: 'inlineCode', value: 'volatile long', position: [Object] },
    { type: 'text', value: ', return type - ', position: [Object] },
    { type: 'inlineCode', value: 'long', position: [Object] },
    { type: 'text', value: '. ', position: [Object] },
    { type: 'inlineCode', value: 'long', position: [Object] },
    {
      type: 'text',
      value: ' is required to avoid\n' +
        'potential calling convention issues because it is casted to a function\n' +
        'pointer that accepts ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'long', position: [Object] },
    { type: 'text', value: '’s. The reason for ', position: [Object] },
    { type: 'inlineCode', value: 'volatile', position: [Object] },
    {
      type: 'text',
      value: ' is interesting:\n' +
        'lots of libc functions are annotated with various argument constraints\n' +
        '(e.g. this argument should not be ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'NULL', position: [Object] },
    {
      type: 'text',
      value: ', or that argument must be a\n' +
        'valid file descriptor); C reproducers may call these functions with\n' +
        'constant arguments and compiler may see that some of these constraints\n' +
        'are violated (e.g. passing ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'NULL', position: [Object] },
    { type: 'text', value: ' to a ', position: [Object] },
    { type: 'inlineCode', value: 'non-NULL', position: [Object] },
    {
      type: 'text',
      value: ' argument, or passing\n',
      position: [Object]
    },
    { type: 'inlineCode', value: '-1', position: [Object] },
    {
      type: 'text',
      value: ' as file descriptor) and produce errors/warnings. ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'volatile', position: [Object] },
    { type: 'text', value: ' prevents\nthat.', position: [Object] }
  ],
  position: {
    start: { line: 62, column: 1, offset: 2374 },
    end: { line: 74, column: 6, offset: 3224 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Now, to handle the pseudo-syscall properly we have to update the\n',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'isSupportedSyzkall',
      position: [Object]
    },
    { type: 'text', value: ' in\n', position: [Object] },
    {
      type: 'link',
      title: null,
      url: '../pkg/host/syscalls_linux.go',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ' and add a particular\n' +
        'case for this syscall, enabling it when necessary. If we want to enable\n' +
        'it unconditionally we can simply make ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'isSupportedSyzkall',
      position: [Object]
    },
    { type: 'text', value: ' return ', position: [Object] },
    { type: 'inlineCode', value: 'true,\n""', position: [Object] },
    { type: 'text', value: ' for it:', position: [Object] }
  ],
  position: {
    start: { line: 76, column: 1, offset: 3226 },
    end: { line: 81, column: 12, offset: 3543 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'func isSupportedSyzkall(sandbox string, c *prog.Syscall) (bool, string) {\n' +
    '        switch c.CallName {\n' +
    '        ...\n' +
    '        case "syz_mycall":\n' +
    '                return true, ""',
  position: {
    start: { line: 83, column: 1, offset: 3545 },
    end: { line: 87, column: 36, offset: 3737 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'Finally, run ', position: [Object] },
    { type: 'inlineCode', value: 'make generate', position: [Object] },
    {
      type: 'text',
      value: '. Now you can use it in a syscall\n' +
        'description file as if it was a regular system call:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 89, column: 1, offset: 3739 },
    end: { line: 90, column: 53, offset: 3853 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'syz_mycall(arg0 pid, arg1 const[0])',
  position: {
    start: { line: 92, column: 1, offset: 3855 },
    end: { line: 92, column: 40, offset: 3894 }
  }
}
{
  type: 'html',
  value: '<div id="dependencies"/>',
  position: {
    start: { line: 94, column: 1, offset: 3896 },
    end: { line: 94, column: 25, offset: 3920 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [
    {
      type: 'text',
      value: 'External Dependencies',
      position: [Object]
    }
  ],
  position: {
    start: { line: 96, column: 1, offset: 3922 },
    end: { line: 96, column: 25, offset: 3946 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The implementation must not use any external libraries nor external headers,\n' +
        'except for the most basic and standard ones (like ',
      position: [Object]
    },
    { type: 'inlineCode', value: '<unistd.h>', position: [Object] },
    { type: 'text', value: ' and\n', position: [Object] },
    { type: 'inlineCode', value: '<sys/mman.h>', position: [Object] },
    {
      type: 'text',
      value: '). In particular, it must not depend on libraries/headers\n' +
        'installed by additional packages nor on headers for recently added kernel\n' +
        'subsystems. External dependencies have proved to be brittle and easily cause\n' +
        'build breakage because all dependencies will be required for any build/run on\n' +
        'the fuzzer and any C reproducer. For example, packages/headers may be missing\n' +
        'on some distros, named differently, be of a wrong version, broken, or conflict\n' +
        'with other headers. Unfortunately, there is no way to reliably specify such\n' +
        'dependencies and requirements for C programs. Therefore, if the pseudo-syscall\n' +
        'requires definitions of some structures, constants, or helper functions, these\n' +
        'should be described in the executor code itself as minimally as possible (they\n' +
        'will be part of C reproducers).',
      position: [Object]
    }
  ],
  position: {
    start: { line: 98, column: 1, offset: 3948 },
    end: { line: 110, column: 32, offset: 4894 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Testing', position: [Object] } ],
  position: {
    start: { line: 112, column: 1, offset: 4896 },
    end: { line: 112, column: 11, offset: 4906 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Each new pseudo-syscall should have at least one test in ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'sys/OS/test', position: [Object] },
    { type: 'text', value: '.\nSee ', position: [Object] },
    {
      type: 'link',
      title: null,
      url: '/sys/linux/test',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ' for an example. A tests is just a program\n' +
        'with checked syscall return values. There should be at least one test\n' +
        'that contains “the main successful scenario” of using the pseudo-syscall.\n' +
        'See ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '/sys/linux/test/io_uring',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ' as a good example.\n' +
        'Such tests are important because they ensure that the pseudo-syscall code\n' +
        'does not contain “stupid” bugs (e.g. crash on NULL-deref each time),\n' +
        'that it is possible for the fuzzer to come up with the successful scenario\n' +
        '(as a combination of the pseudo-syscall and the surrounding descriptions)\n' +
        'and that it will continue to work in future.\n' +
        'See ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'syscall_descriptions.md#testing',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: '\nfor details about the tests.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 114, column: 1, offset: 4908 },
    end: { line: 125, column: 29, offset: 5694 }
  }
}
{
  type: 'heading',
  depth: 1,
  children: [
    { type: 'text', value: 'Syscall descriptions', position: [Object] }
  ],
  position: {
    start: { line: 2, column: 1, offset: 1 },
    end: { line: 2, column: 23, offset: 23 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'inlineCode', value: 'syzkaller', position: [Object] },
    {
      type: 'text',
      value: ' uses declarative description of syscall interfaces to manipulate\n' +
        'programs (sequences of syscalls). Below you can see (hopefully self-explanatory)\n' +
        'excerpt from the descriptions:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 4, column: 1, offset: 25 },
    end: { line: 6, column: 31, offset: 213 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'open(file filename, flags flags[open_flags], mode flags[open_mode]) fd\n' +
    'read(fd fd, buf buffer[out], count len[buf])\n' +
    'close(fd fd)\n' +
    'open_mode = S_IRUSR, S_IWUSR, S_IXUSR, S_IRGRP, S_IWGRP, S_IXGRP, S_IROTH, S_IWOTH, S_IXOTH',
  position: {
    start: { line: 8, column: 1, offset: 215 },
    end: { line: 13, column: 4, offset: 443 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The descriptions are contained in ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'sys/$OS/*.txt', position: [Object] },
    {
      type: 'text',
      value: ' files.\nFor example see the ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '/sys/linux/dev_snd_midi.txt',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ' file\nfor descriptions of the Linux MIDI interfaces.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 15, column: 1, offset: 445 },
    end: { line: 17, column: 47, offset: 631 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'A more formal description of the description syntax can be found ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'syscall_descriptions_syntax.md',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 19, column: 1, offset: 633 },
    end: { line: 19, column: 105, offset: 737 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Programs', position: [Object] } ],
  position: {
    start: { line: 21, column: 1, offset: 739 },
    end: { line: 21, column: 12, offset: 750 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The translated descriptions are then used to generate, mutate, execute, minimize, serialize\n' +
        'and deserialize programs. A program is a sequences of syscalls with concrete values for arguments.\n' +
        'Here is an example (of a textual representation) of a program:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 23, column: 1, offset: 752 },
    end: { line: 25, column: 63, offset: 1005 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'r0 = open(&(0x7f0000000000)="./file0", 0x3, 0x9)\n' +
    'read(r0, &(0x7f0000000000), 42)\n' +
    'close(r0)',
  position: {
    start: { line: 27, column: 1, offset: 1007 },
    end: { line: 31, column: 4, offset: 1105 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'For actual manipulations ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syzkaller', position: [Object] },
    {
      type: 'text',
      value: ' uses in-memory AST-like representation consisting of\n',
      position: [Object]
    },
    { type: 'inlineCode', value: 'Call', position: [Object] },
    { type: 'text', value: ' and ', position: [Object] },
    { type: 'inlineCode', value: 'Arg', position: [Object] },
    { type: 'text', value: ' values defined in ', position: [Object] },
    {
      type: 'link',
      title: null,
      url: '/prog/prog.go',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: '. That representation is used to\n',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '/prog/analysis.go',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ', ', position: [Object] },
    {
      type: 'link',
      title: null,
      url: '/prog/rand.go',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ', ', position: [Object] },
    {
      type: 'link',
      title: null,
      url: '/prog/mutation.go',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ',\n', position: [Object] },
    {
      type: 'link',
      title: null,
      url: '/prog/minimization.go',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ', ', position: [Object] },
    {
      type: 'link',
      title: null,
      url: '/prog/validation.go',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ', etc programs.', position: [Object] }
  ],
  position: {
    start: { line: 33, column: 1, offset: 1107 },
    end: { line: 36, column: 82, offset: 1461 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The in-memory representation can be ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '/prog/encoding.go',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ' to/from\ntextual form to store in on-disk corpus, show to humans, etc.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 38, column: 1, offset: 1463 },
    end: { line: 39, column: 62, offset: 1601 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'There is also another ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '/prog/decodeexec.go',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: '\nof the programs (called ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'exec', position: [Object] },
    {
      type: 'text',
      value: '), that is much simpler, does not contain rich type information (irreversible)\n' +
        'and is used for actual execution (interpretation) of programs by ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '/executor/executor.cc',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 41, column: 1, offset: 1603 },
    end: { line: 43, column: 100, offset: 1878 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [
    {
      type: 'text',
      value: 'Describing new system calls',
      position: [Object]
    }
  ],
  position: {
    start: { line: 45, column: 1, offset: 1880 },
    end: { line: 45, column: 31, offset: 1910 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'This section describes how to extend syzkaller to allow fuzz testing of more kernel interfaces.\n' +
        'This is particularly useful for kernel developers who are proposing new system calls.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 47, column: 1, offset: 1912 },
    end: { line: 48, column: 86, offset: 2093 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Currently all syscall descriptions are manually-written. There is an\n',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://github.com/google/syzkaller/issues/590',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ' to provide some aid\n' +
        'for this process and some ongoing work, but we are not there yet to have a\n' +
        'fully-automated way to generate descriptions.\n' +
        'There is a helper ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'headerparser_usage.md',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ' utility that can auto-generate\n' +
        'some parts of descriptions from header files. Visual Studio Code has ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://marketplace.visualstudio.com/items?itemName=AndreyArtemiev.syzlang-extension&ssr=false#overview',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ' for highlighting syntax.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 50, column: 1, offset: 2095 },
    end: { line: 55, column: 220, offset: 2672 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'To enable fuzzing of a new kernel interface:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 57, column: 1, offset: 2674 },
    end: { line: 57, column: 45, offset: 2718 }
  }
}
{
  type: 'list',
  ordered: true,
  start: 1,
  spread: true,
  children: [
    {
      type: 'listItem',
      spread: true,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: true,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: true,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    }
  ],
  position: {
    start: { line: 59, column: 1, offset: 2720 },
    end: { line: 87, column: 65, offset: 4400 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'In the instructions above ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'make extract', position: [Object] },
    {
      type: 'text',
      value: ' generates/updates the ',
      position: [Object]
    },
    { type: 'inlineCode', value: '*.const', position: [Object] },
    { type: 'text', value: ' files.\n', position: [Object] },
    { type: 'inlineCode', value: '$KSRC', position: [Object] },
    {
      type: 'text',
      value: ' should point to the ',
      position: [Object]
    },
    { type: 'emphasis', children: [Array], position: [Object] },
    { type: 'text', value: ' kernel checkout.', position: [Object] },
    { type: 'break', position: [Object] },
    { type: 'emphasis', children: [Array], position: [Object] },
    { type: 'text', value: ': for Linux the ', position: [Object] },
    { type: 'emphasis', children: [Array], position: [Object] },
    {
      type: 'text',
      value: ' kernel checkout generally means the\n',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/log/',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ' tree.', position: [Object] },
    { type: 'break', position: [Object] },
    {
      type: 'text',
      value: 'However, in some cases we add descriptions for interfaces that are not in the mainline tree yet,\n' +
        'so if ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'make extract', position: [Object] },
    {
      type: 'text',
      value: ' complains about missing header files or constants undefined on all architectures,\n' +
        'try to use the latest ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git/log/',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: '\n' +
        'tree (or if it happens to be broken at the moment, try a slightly older linux-next tree).',
      position: [Object]
    },
    { type: 'break', position: [Object] },
    { type: 'emphasis', children: [Array], position: [Object] },
    { type: 'text', value: ': ', position: [Object] },
    { type: 'inlineCode', value: 'make extract', position: [Object] },
    { type: 'text', value: ' overwrites ', position: [Object] },
    { type: 'inlineCode', value: '.config', position: [Object] },
    { type: 'text', value: ' in ', position: [Object] },
    { type: 'inlineCode', value: '$KSRC', position: [Object] },
    { type: 'text', value: ' and ', position: [Object] },
    { type: 'inlineCode', value: 'mrproper', position: [Object] },
    { type: 'text', value: '’s it.\n', position: [Object] },
    { type: 'emphasis', children: [Array], position: [Object] },
    { type: 'text', value: ': ', position: [Object] },
    { type: 'inlineCode', value: '*.const', position: [Object] },
    {
      type: 'text',
      value: ' files are checked-in with the ',
      position: [Object]
    },
    { type: 'inlineCode', value: '*.txt', position: [Object] },
    {
      type: 'text',
      value: ' changes in the same commit.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 89, column: 1, offset: 4402 },
    end: { line: 98, column: 84, offset: 5254 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'Then ', position: [Object] },
    { type: 'inlineCode', value: 'make generate', position: [Object] },
    {
      type: 'text',
      value: ' updates generated code and ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'make', position: [Object] },
    { type: 'text', value: ' rebuilds binaries.', position: [Object] },
    { type: 'break', position: [Object] },
    { type: 'text', value: 'Note: ', position: [Object] },
    { type: 'inlineCode', value: 'make generate', position: [Object] },
    {
      type: 'text',
      value: ' does not require any kernel sources, native compilers, etc\n' +
        'and is pure text processing.\n' +
        'Note: ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'make generate', position: [Object] },
    {
      type: 'text',
      value: ' also updates the SYZ_REVISION under ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'executor/defs.h',
      position: [Object]
    },
    {
      type: 'text',
      value: ', which\n' +
        'is required for machine check while running syz-manager. This should be taken care\n' +
        'of especially if you are trying to rebase with your own change on syscall description.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 100, column: 1, offset: 5256 },
    end: { line: 105, column: 87, offset: 5693 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'Note: ', position: [Object] },
    { type: 'inlineCode', value: 'make extract', position: [Object] },
    {
      type: 'text',
      value: ' extracts constants for all architectures which requires\n' +
        'installed cross-compilers. If you get errors about missing compilers/libraries,\n' +
        'try ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'sudo make install_prerequisites',
      position: [Object]
    },
    {
      type: 'text',
      value: ' or install equivalent package for your distro.\nNote: ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'sudo make install_prerequisites',
      position: [Object]
    },
    {
      type: 'text',
      value: ' will success even with some package failed to\ninstall, ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'sudo apt-get update && sudo apt-get upgrade',
      position: [Object]
    },
    {
      type: 'text',
      value: ' might be required to make this\nmore efficient.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 107, column: 1, offset: 5695 },
    end: { line: 112, column: 16, offset: 6124 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'If you want to fuzz only the new subsystem that you described locally, you may\n' +
        'find the ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'enable_syscalls',
      position: [Object]
    },
    {
      type: 'text',
      value: ' configuration parameter useful to specifically target\n' +
        'the new system calls. All system calls in the ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'enable_syscalls',
      position: [Object]
    },
    {
      type: 'text',
      value: ' list\n' +
        'will be enabled if their requirements are met (ie. if they are supported\n' +
        'in the target machine and any other system calls that need to run in\n' +
        'order to provide inputs for them are also enabled). You can also include\n' +
        'wildcard definitions to enable multiple system calls in a single line,\n' +
        'for example: ',
      position: [Object]
    },
    { type: 'inlineCode', value: '"ioctl"', position: [Object] },
    {
      type: 'text',
      value: ' will enable all the described ioctls syscalls\n' +
        'that have their requirements met, ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: '"ioctl$UDMABUF_CREATE"',
      position: [Object]
    },
    {
      type: 'text',
      value: ' enables\nonly that particular ioctl call, ',
      position: [Object]
    },
    { type: 'inlineCode', value: '"write$UHID_*"', position: [Object] },
    {
      type: 'text',
      value: ' enables all write\n' +
        'system calls that start with that description identifier.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 114, column: 1, offset: 6126 },
    end: { line: 124, column: 58, offset: 6906 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'When updating existing syzkaller descriptions, note, that unless there’s a drastic\n' +
        'change in descriptions for a particular syscall, the programs that are already in\n' +
        'the corpus will be kept there, unless you manually clear them out (for example by\n' +
        'removing the ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'corpus.db', position: [Object] },
    { type: 'text', value: ' file).', position: [Object] }
  ],
  position: {
    start: { line: 126, column: 1, offset: 6908 },
    end: { line: 129, column: 32, offset: 7186 }
  }
}
{
  type: 'html',
  value: '<div id="tips"/>',
  position: {
    start: { line: 131, column: 1, offset: 7188 },
    end: { line: 131, column: 17, offset: 7204 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [
    {
      type: 'text',
      value: 'Description tips and FAQ',
      position: [Object]
    }
  ],
  position: {
    start: { line: 133, column: 1, offset: 7206 },
    end: { line: 133, column: 28, offset: 7233 }
  }
}
{
  type: 'html',
  value: '<div id="names"/>',
  position: {
    start: { line: 135, column: 1, offset: 7235 },
    end: { line: 135, column: 18, offset: 7252 }
  }
}
{
  type: 'heading',
  depth: 3,
  children: [
    {
      type: 'text',
      value: 'Syscall, struct, field, flags names',
      position: [Object]
    }
  ],
  position: {
    start: { line: 137, column: 1, offset: 7254 },
    end: { line: 137, column: 40, offset: 7293 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Stick with existing kernel names for things, don’t invent new names if possible.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 139, column: 1, offset: 7295 },
    end: { line: 139, column: 81, offset: 7375 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Following established naming conventions provides the following benefits:\n' +
        '(1) consistency and familiarity of names used across kernel interfaces,\n' +
        'which also enables searching kernel sources for related names; and\n' +
        '(2) enable static checking of descriptions (e.g. missed flags or mistyped fields)\n' +
        'with ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '/tools/syz-check/check.go',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 141, column: 1, offset: 7377 },
    end: { line: 145, column: 45, offset: 7716 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'For example, if there is an existing enum ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'v4l2_buf_type', position: [Object] },
    {
      type: 'text',
      value: ' in the kernel headers,\n' +
        'use this name for flags in descriptions as well. The same for structs, unions,\n' +
        'fields, etc. For syscall and struct variants, append the variant name after the ',
      position: [Object]
    },
    { type: 'inlineCode', value: '$', position: [Object] },
    {
      type: 'text',
      value: ' sign.\nFor example, ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'fcntl$F_GET_RW_HINT',
      position: [Object]
    },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: 'ioctl$FIOCLEX', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    {
      type: 'inlineCode',
      value: 'setsockopt$SO_TIMESTAMP',
      position: [Object]
    },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 147, column: 1, offset: 7718 },
    end: { line: 150, column: 80, offset: 8047 }
  }
}
{
  type: 'html',
  value: '<div id="ordering"/>',
  position: {
    start: { line: 152, column: 1, offset: 8049 },
    end: { line: 152, column: 21, offset: 8069 }
  }
}
{
  type: 'heading',
  depth: 3,
  children: [
    {
      type: 'text',
      value: 'Resources for syscall ordering',
      position: [Object]
    }
  ],
  position: {
    start: { line: 154, column: 1, offset: 8071 },
    end: { line: 154, column: 35, offset: 8105 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Resources and resource directions (',
      position: [Object]
    },
    { type: 'inlineCode', value: 'in', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: 'out', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: 'inout', position: [Object] },
    {
      type: 'text',
      value: ') impose implicit ordering\nconstraints on involved syscalls.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 156, column: 1, offset: 8107 },
    end: { line: 157, column: 34, offset: 8222 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'If a syscall accepts a resource of a particular type (e.g. has ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'fd_cdrom', position: [Object] },
    {
      type: 'text',
      value: ' as an input),\n' +
        'then it will be generally placed after a syscall that has this resource as output,\n' +
        'so that the resource value can be passed between syscalls. For example:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 159, column: 1, offset: 8224 },
    end: { line: 161, column: 72, offset: 8466 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'r0 = openat$cdrom(...)\nioctl$CDROMPAUSE(r0, 0x123)\nclose(r0)',
  position: {
    start: { line: 163, column: 1, offset: 8468 },
    end: { line: 167, column: 4, offset: 8536 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Syscall arguments are always ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'in', position: [Object] },
    { type: 'text', value: ', return values are ', position: [Object] },
    { type: 'inlineCode', value: 'out', position: [Object] },
    {
      type: 'text',
      value: ' and pointer indirections\nhave explicit direction as ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'ptr', position: [Object] },
    {
      type: 'text',
      value: ' type attribute. Also, it is possible to specify\n' +
        'direction attribute individually for struct fields to account for more complex\n' +
        'producer/consumer scenarios with structs that include both input/output resources.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 169, column: 1, offset: 8538 },
    end: { line: 172, column: 83, offset: 8864 }
  }
}
{
  type: 'html',
  value: '<div id="values"/>',
  position: {
    start: { line: 174, column: 1, offset: 8866 },
    end: { line: 174, column: 19, offset: 8884 }
  }
}
{
  type: 'heading',
  depth: 3,
  children: [
    {
      type: 'text',
      value: 'Use of unexpected/undeclared values',
      position: [Object]
    }
  ],
  position: {
    start: { line: 176, column: 1, offset: 8886 },
    end: { line: 176, column: 40, offset: 8925 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'When specifying integer/string flags or integer fields stick with the official expected values only.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 178, column: 1, offset: 8927 },
    end: { line: 178, column: 101, offset: 9027 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Commonly, bugs are triggered by unexpected inputs. With that in mind, it can be too tempting to introduce\n' +
        'some unexpected values to descriptions (e.g. ',
      position: [Object]
    },
    { type: 'inlineCode', value: '-1', position: [Object] },
    { type: 'text', value: ' or ', position: [Object] },
    { type: 'inlineCode', value: 'INT_MAX', position: [Object] },
    {
      type: 'text',
      value: '). This is not encouraged for several reasons.\n' +
        'First, this is a cross-cutting aspect and these special unexpected values are applicable to just\n' +
        'any flags and integer fields. Manually specifying them thousands of times is not scalable and\n' +
        'is not maintainable. Second, It’s hard for the fuzzer to come up with correct complex syscall sequences,\n' +
        'and the descriptions are meant to help with this. Coming up with unexpected integer values is easy\n' +
        'and the fuzzer does not need help here. Overall the idea is to improve the generic fuzzer logic\n' +
        'to handle these cases better, which will help all descriptions, rather than over-specializing each\n' +
        'individual integer separately. Fuzzer already has several tricks to deal with this, e.g. comparison\n' +
        'operand value interception and list of typical magic values.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 180, column: 1, offset: 9029 },
    end: { line: 189, column: 61, offset: 9994 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Note: some values for flags may be undocumented only as an oversight. These values should be added to descriptions.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 191, column: 1, offset: 9996 },
    end: { line: 191, column: 116, offset: 10111 }
  }
}
{
  type: 'html',
  value: '<div id="flags"/>',
  position: {
    start: { line: 193, column: 1, offset: 10113 },
    end: { line: 193, column: 18, offset: 10130 }
  }
}
{
  type: 'heading',
  depth: 3,
  children: [ { type: 'text', value: 'Flags/enums', position: [Object] } ],
  position: {
    start: { line: 195, column: 1, offset: 10132 },
    end: { line: 195, column: 16, offset: 10147 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'The ', position: [Object] },
    { type: 'inlineCode', value: 'flags', position: [Object] },
    {
      type: 'text',
      value: ' type is used for all of:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 197, column: 1, offset: 10149 },
    end: { line: 197, column: 37, offset: 10185 }
  }
}
{
  type: 'list',
  ordered: false,
  start: null,
  spread: false,
  children: [
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    }
  ],
  position: {
    start: { line: 199, column: 2, offset: 10188 },
    end: { line: 201, column: 33, offset: 10407 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The fuzzer has logic to distinguish enums and bit flags, and generates values\n' +
        'accordingly. So the general guideline is just to enumerate the meaningful values\n' +
        'in ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'flags', position: [Object] },
    {
      type: 'text',
      value: ' without adding any “special” values to “help” the current fuzzer logic.\n' +
        'When/if the fuzzer logic changes/improves, these manual additions may become\n' +
        'unnecessary, or, worse, interfere with the fuzzer ability to generate good values.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 203, column: 1, offset: 10409 },
    end: { line: 207, column: 83, offset: 10810 }
  }
}
{
  type: 'html',
  value: '<div id="order"/>',
  position: {
    start: { line: 209, column: 1, offset: 10812 },
    end: { line: 209, column: 18, offset: 10829 }
  }
}
{
  type: 'heading',
  depth: 3,
  children: [ { type: 'text', value: 'Declaration order', position: [Object] } ],
  position: {
    start: { line: 211, column: 1, offset: 10831 },
    end: { line: 211, column: 22, offset: 10852 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'inlineCode', value: 'syzlang', position: [Object] },
    {
      type: 'text',
      value: ' does not require declaring entities before use (like C/C++ does), entities can refer to entities\n' +
        'declared later (like in Go). It’s recommended to declare things in the order of importance so that the reader\n' +
        'sees the most important things first and then proceeds to finer and finer implementation details. For example,\n' +
        'system calls usually should go before flag declarations used in these system calls. Note: this order is usually\n' +
        'the exact opposite of how things are declared in C: the least important things go first.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 213, column: 1, offset: 10854 },
    end: { line: 217, column: 89, offset: 11382 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [
    {
      type: 'text',
      value: 'Description compilation internals',
      position: [Object]
    }
  ],
  position: {
    start: { line: 219, column: 1, offset: 11384 },
    end: { line: 219, column: 37, offset: 11420 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The process of compiling the textual syscall descriptions into machine-usable\n' +
        'form used by ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syzkaller', position: [Object] },
    {
      type: 'text',
      value: ' to actually generate programs consists of 2 steps.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 221, column: 1, offset: 11422 },
    end: { line: 222, column: 76, offset: 11575 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The first step is extraction of values of symbolic constants from kernel sources using\n',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '/sys/syz-extract',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ' utility. ', position: [Object] },
    { type: 'inlineCode', value: 'syz-extract', position: [Object] },
    {
      type: 'text',
      value: ' generates a small C program that\n' +
        'includes kernel headers referenced by ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'include', position: [Object] },
    {
      type: 'text',
      value: ' directives, defines macros as specified\nby ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'define', position: [Object] },
    {
      type: 'text',
      value: ' directives and prints values of symbolic constants.\n' +
        'Results are stored in ',
      position: [Object]
    },
    { type: 'inlineCode', value: '.const', position: [Object] },
    {
      type: 'text',
      value: ' files, one per arch.\nFor example, ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '/sys/linux/dev_ptmx.txt',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ' is translated into\n',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '/sys/linux/dev_ptmx.txt.const',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 224, column: 1, offset: 11577 },
    end: { line: 230, column: 63, offset: 12100 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The second step is translation of descriptions into Go code using\n',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '/sys/syz-sysgen',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ' utility (the actual compiler code lives in\n',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '/pkg/ast/',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ' and ', position: [Object] },
    {
      type: 'link',
      title: null,
      url: '/pkg/compiler/',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ').\n' +
        'This step uses syscall descriptions and the const files generated during the first step\n' +
        'and produces instantiations of ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'Syscall', position: [Object] },
    { type: 'text', value: ' and ', position: [Object] },
    { type: 'inlineCode', value: 'Type', position: [Object] },
    { type: 'text', value: ' types defined in ', position: [Object] },
    {
      type: 'link',
      title: null,
      url: '/prog/types.go',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: '.\nYou can see an example of the compiler output for Akaros in ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'sys/akaros/gen/amd64.go',
      position: [Object]
    },
    {
      type: 'text',
      value: '.\n' +
        'This step also generates some minimal syscall metadata for C++ code in ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'executor/syscalls.h',
      position: [Object]
    },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 232, column: 1, offset: 12102 },
    end: { line: 238, column: 94, offset: 12669 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [
    {
      type: 'text',
      value: 'Non-mainline subsystems',
      position: [Object]
    }
  ],
  position: {
    start: { line: 240, column: 1, offset: 12671 },
    end: { line: 240, column: 27, offset: 12697 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'inlineCode', value: 'make extract', position: [Object] },
    {
      type: 'text',
      value: ' extracts constants for all ',
      position: [Object]
    },
    { type: 'inlineCode', value: '*.txt', position: [Object] },
    {
      type: 'text',
      value: ' files and for all supported architectures.\n' +
        'This may not work for subsystems that are not present in mainline kernel or if you have\n' +
        'problems with native kernel compilers, etc. In such cases the ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syz-extract', position: [Object] },
    { type: 'text', value: ' utility\nused by ', position: [Object] },
    { type: 'inlineCode', value: 'make extract', position: [Object] },
    {
      type: 'text',
      value: ' can be run manually for single file/arch as:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 242, column: 1, offset: 12699 },
    end: { line: 245, column: 68, offset: 13031 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'make bin/syz-extract\n' +
    'bin/syz-extract -os linux -arch $ARCH -sourcedir $KSRC -builddir $LINUXBLD <new>.txt\n' +
    'make generate\n' +
    'make',
  position: {
    start: { line: 247, column: 1, offset: 13033 },
    end: { line: 252, column: 4, offset: 13165 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'inlineCode', value: '$ARCH', position: [Object] },
    { type: 'text', value: ' is one of ', position: [Object] },
    { type: 'inlineCode', value: 'amd64', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: '386', position: [Object] },
    { type: 'text', value: ' ', position: [Object] },
    { type: 'inlineCode', value: 'arm64', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: 'arm', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: 'ppc64le', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: 'mips64le', position: [Object] },
    {
      type: 'text',
      value: '.\nIf the subsystem is supported on several architectures, then run ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syz-extract', position: [Object] },
    { type: 'text', value: ' for each arch.\n', position: [Object] },
    { type: 'inlineCode', value: '$LINUX', position: [Object] },
    {
      type: 'text',
      value: ' should point to kernel source checkout, which is configured for the\n' +
        'corresponding arch (i.e. you need to run ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'make ARCH=arch someconfig && make ARCH=arch',
      position: [Object]
    },
    {
      type: 'text',
      value: ' there first,\nremember to add ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'CROSS_COMPILE=arm-linux-gnueabi-/aarch64-linux-gnu-/powerpc64le-linux-gnu-',
      position: [Object]
    },
    {
      type: 'text',
      value: ' if needed).\nIf the kernel was built into a separate directory (with ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'make O=output_dir',
      position: [Object]
    },
    {
      type: 'text',
      value: ', remember to put .config\n' +
        'into output_dir, this will be helpful if you’d like to work on different arch at the same time)\n' +
        'then also set ',
      position: [Object]
    },
    { type: 'inlineCode', value: '$LINUXBLD', position: [Object] },
    {
      type: 'text',
      value: ' to the location of the build directory.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 254, column: 1, offset: 13167 },
    end: { line: 261, column: 66, offset: 13877 }
  }
}
{
  type: 'html',
  value: '<div id="testing"/>',
  position: {
    start: { line: 263, column: 1, offset: 13879 },
    end: { line: 263, column: 20, offset: 13898 }
  }
}
{
  type: 'heading',
  depth: 3,
  children: [
    {
      type: 'text',
      value: 'Testing of descriptions',
      position: [Object]
    }
  ],
  position: {
    start: { line: 265, column: 1, offset: 13900 },
    end: { line: 265, column: 28, offset: 13927 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Descriptions themselves may contain bugs. After running ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syz-manager', position: [Object] },
    {
      type: 'text',
      value: ' with the new descriptions\n' +
        'it’s always useful to check the kernel code coverage report available in the ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syz-manager', position: [Object] },
    {
      type: 'text',
      value: ' web UI.\n' +
        'The report allows to assess if everything one expects to be covered is in fact covered,\n' +
        'and if not, where the fuzzer gets stuck. However, this is a useful but quite indirect assessment\n' +
        'of the descriptions correctness. The fuzzer may get around some bugs in the descriptions by diverging\n' +
        'from what the descriptions say, but it makes it considerably harder for the fuzzer to progress.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 267, column: 1, offset: 13929 },
    end: { line: 272, column: 96, offset: 14506 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'Tests stored in ', position: [Object] },
    { type: 'inlineCode', value: 'sys/OS/test/*', position: [Object] },
    {
      type: 'text',
      value: ' provide a more direct testing of the descriptions. Each test is just\n' +
        'a program with checked syscall return values. The syntax of the programs is briefly described ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'program_syntax.md',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: '.\nYou can also look at the ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '/sys/linux/test',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ' and at the program ', position: [Object] },
    {
      type: 'link',
      title: null,
      url: '/prog/encoding.go',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '.\n', position: [Object] },
    { type: 'inlineCode', value: 'AUTO', position: [Object] },
    {
      type: 'text',
      value: ' keyword can be used as a value for consts and pointers, for pointers it will lead to\n' +
        'some reasonable sequential allocation of memory addresses.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 274, column: 1, offset: 14508 },
    end: { line: 278, column: 59, offset: 15004 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'It’s always good to add a test at least for “the main successful scenario” for the subsystem.\n' +
        'It will ensure that the descriptions are actually correct and that it’s possible for the fuzzer\n' +
        'to come up with the successful scenario. See ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '/sys/linux/test/io_uring',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: ' as a good example.', position: [Object] }
  ],
  position: {
    start: { line: 280, column: 1, offset: 15006 },
    end: { line: 282, column: 106, offset: 15301 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The tests can be run with the ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syz-runtest', position: [Object] },
    { type: 'text', value: ' utility as:', position: [Object] }
  ],
  position: {
    start: { line: 284, column: 1, offset: 15303 },
    end: { line: 284, column: 56, offset: 15358 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'make runtest && bin/syz-runtest -config manager.config',
  position: {
    start: { line: 285, column: 1, offset: 15359 },
    end: { line: 287, column: 4, offset: 15421 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'inlineCode', value: 'syz-runtest', position: [Object] },
    {
      type: 'text',
      value: ' boots multiple VMs and runs these tests in different execution modes inside of the VMs.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 288, column: 1, offset: 15422 },
    end: { line: 288, column: 102, offset: 15523 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'However, full ', position: [Object] },
    { type: 'inlineCode', value: 'syz-runtest', position: [Object] },
    {
      type: 'text',
      value: ' run takes time, so while developing the test, it’s more handy to run it\n' +
        'using the ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syz-execprog', position: [Object] },
    {
      type: 'text',
      value: ' utility. To run the test, copy ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syz-execprog', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: 'syz-executor', position: [Object] },
    {
      type: 'text',
      value: ' and the test\n' +
        'into a manually booted VM and then run the following command inside of the VM:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 290, column: 1, offset: 15525 },
    end: { line: 292, column: 79, offset: 15803 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'syz-execprog -debug -threaded=0 mytest',
  position: {
    start: { line: 293, column: 1, offset: 15804 },
    end: { line: 295, column: 4, offset: 15850 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'It will show results of all executed syscalls. It’s also handy for manual debugging of pseudo-syscall code:\n' +
        'if you add some temporal ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'debug', position: [Object] },
    {
      type: 'text',
      value: ' calls to the pseudo-syscall, ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'syz-execprog -debug',
      position: [Object]
    },
    {
      type: 'text',
      value: ' will show their output.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 296, column: 1, offset: 15851 },
    end: { line: 297, column: 108, offset: 16066 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The test syntax can be checked by running:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 299, column: 1, offset: 16068 },
    end: { line: 299, column: 43, offset: 16110 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'go test -run=TestParsing ./pkg/runtest',
  position: {
    start: { line: 300, column: 1, offset: 16111 },
    end: { line: 302, column: 4, offset: 16157 }
  }
}
{
  type: 'heading',
  depth: 1,
  children: [
    {
      type: 'text',
      value: 'Syscall description language',
      position: [Object]
    }
  ],
  position: {
    start: { line: 2, column: 1, offset: 1 },
    end: { line: 2, column: 31, offset: 31 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'aka ', position: [Object] },
    { type: 'inlineCode', value: 'syzlang', position: [Object] },
    { type: 'text', value: ' (', position: [Object] },
    { type: 'inlineCode', value: '[siːzˈlæŋg]', position: [Object] },
    { type: 'text', value: ')', position: [Object] }
  ],
  position: {
    start: { line: 3, column: 1, offset: 32 },
    end: { line: 3, column: 30, offset: 61 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Pseudo-formal grammar of syscall description:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 5, column: 1, offset: 63 },
    end: { line: 5, column: 46, offset: 108 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'syscallname "(" [arg ["," arg]*] ")" [type] ["(" attribute* ")"]\n' +
    'arg = argname type\n' +
    'argname = identifier\n' +
    'type = typename [ "[" type-options "]" ]\n' +
    'typename = "const" | "intN" | "intptr" | "flags" | "array" | "ptr" |\n' +
    '\t   "string" | "strconst" | "filename" | "glob" | "len" |\n' +
    '\t   "bytesize" | "bytesizeN" | "bitsize" | "vma" | "proc" |\n' +
    '\t   "compressed_image"\n' +
    'type-options = [type-opt ["," type-opt]]',
  position: {
    start: { line: 7, column: 1, offset: 110 },
    end: { line: 17, column: 4, offset: 514 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'common type-options include:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 19, column: 1, offset: 516 },
    end: { line: 19, column: 29, offset: 544 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '"opt" - the argument is optional (like mmap fd argument, or accept peer argument)',
  position: {
    start: { line: 21, column: 1, offset: 546 },
    end: { line: 23, column: 4, offset: 635 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'rest of the type-options are type-specific:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 25, column: 1, offset: 637 },
    end: { line: 25, column: 44, offset: 680 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '"const": integer constant, type-options:\n' +
    '\tvalue, underlying type (one of "intN", "intptr")\n' +
    '"intN"/"intptr": an integer without a particular meaning, type-options:\n' +
    '\teither an optional range of values (e.g. "5:10", or "100:200")\n' +
    '\tor a reference to flags description (see below),\n' +
    '\tor a single value\n' +
    '\toptionally followed by an alignment parameter if using a range\n' +
    '"flags": a set of values, type-options:\n' +
    '\treference to flags description (see below), underlying int type (e.g. "int32")\n' +
    '"array": a variable/fixed-length array, type-options:\n' +
    '\ttype of elements, optional size (fixed "5", or ranged "5:10", boundaries inclusive)\n' +
    '"ptr"/"ptr64": a pointer to an object, type-options:\n' +
    '\tdirection (in/out/inout); type of the object\n' +
    '\tptr64 has size of 8 bytes regardless of target pointer size\n' +
    '"string": a zero-terminated memory buffer (no pointer indirection implied), type-options:\n' +
    '\teither a string value in quotes for constant strings (e.g. "foo" or `deadbeef` for hex literal),\n' +
    '\tor a reference to string flags (special value `filename` produces file names),\n' +
    '\toptionally followed by a buffer size (string values will be padded with \\x00 to that size)\n' +
    '"stringnoz": a non-zero-terminated memory buffer (no pointer indirection implied), type-options:\n' +
    '\teither a string value in quotes for constant strings (e.g. "foo" or `deadbeef` for hex literal),\n' +
    '\tor a reference to string flags,\n' +
    '"glob": glob pattern to match on the target files, type-options:\n' +
    '\ta pattern string in quotes (syntax: https://golang.org/pkg/path/filepath/#Match)\n' +
    '\t(e.g. "/sys/" or "/sys/**/*"),\n' +
    '\tor include exclude glob too (e.g. "/sys/**/*:-/sys/power/state")\n' +
    '"fmt": a string representation of an integer (not zero-terminated), type-options:\n' +
    '\tformat (one of "dec", "hex", "oct") and the value (a resource, int, flags, const or proc)\n' +
    '\tthe resulting data is always fixed-size (formatted as "%020llu", "0x%016llx" or "%023llo", respectively)\n' +
    '"len": length of another field (for array it is number of elements), type-options:\n' +
    '\targname of the object\n' +
    '"bytesize": similar to "len", but always denotes the size in bytes, type-options:\n' +
    '\targname of the object\n' +
    '"bitsize": similar to "len", but always denotes the size in bits, type-options:\n' +
    '\targname of the object\n' +
    '"offsetof": offset of the field from the beginning of the parent struct, type-options:\n' +
    '\tfield\n' +
    '"vma"/"vma64": a pointer to a set of pages (used as input for mmap/munmap/mremap/madvise), type-options:\n' +
    '\toptional number of pages (e.g. vma[7]), or a range of pages (e.g. vma[2-4])\n' +
    '\tvma64 has size of 8 bytes regardless of target pointer size\n' +
    '"proc": per process int (see description below), type-options:\n' +
    '\tvalue range start, how many values per process, underlying type\n' +
    '"compressed_image": zlib-compressed disk image\n' +
    '\tsyscalls accepting compressed images must be marked with `no_generate`\n' +
    '\tand `no_minimize` call attributes.\n' +
    '"text": machine code of the specified type, type-options:\n' +
    '\ttext type (x86_real, x86_16, x86_32, x86_64, arm64)\n' +
    '"void": type with static size 0\n' +
    "\tmostly useful inside of templates and varlen unions, can't be syscall argument",
  position: {
    start: { line: 27, column: 1, offset: 682 },
    end: { line: 76, column: 4, offset: 3737 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'flags/len/flags also have trailing underlying type type-option when used in structs/unions/pointers.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 78, column: 1, offset: 3739 },
    end: { line: 78, column: 101, offset: 3839 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Flags are described as:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 80, column: 1, offset: 3841 },
    end: { line: 80, column: 24, offset: 3864 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'flagname = const ["," const]*',
  position: {
    start: { line: 82, column: 1, offset: 3866 },
    end: { line: 84, column: 4, offset: 3903 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'or for string flags as:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 86, column: 1, offset: 3905 },
    end: { line: 86, column: 24, offset: 3928 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'flagname = "\\"" literal "\\"" ["," "\\"" literal "\\""]*',
  position: {
    start: { line: 88, column: 1, offset: 3930 },
    end: { line: 90, column: 4, offset: 3991 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'Call attributes are:', position: [Object] }
  ],
  position: {
    start: { line: 92, column: 1, offset: 3993 },
    end: { line: 92, column: 21, offset: 4013 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '"disabled": the call will not be used in fuzzing; useful to temporary disable some calls\n' +
    '\tor prohibit particular argument combinations.\n' +
    '"timeout[N]": additional execution timeout (in ms) for the call on top of some default value\n' +
    '"prog_timeout[N]": additional execution timeout (in ms) for the whole program if it contains this call;\n' +
    '\tif a program contains several such calls, the max value is used.\n' +
    '"ignore_return": ignore return value of this syscall in fallback feedback; need to be used for calls\n' +
    "\tthat don't return fixed error codes but rather something else (e.g. the current time).\n" +
    `"breaks_returns": ignore return values of all subsequent calls in the program in fallback feedback (can't be trusted).\n` +
    '"no_generate": do not try to generate this syscall, i.e. use only seed descriptions to produce it.\n' +
    '"no_minimize": do not modify instances of this syscall when trying to minimize a crashing program.',
  position: {
    start: { line: 94, column: 1, offset: 4015 },
    end: { line: 105, column: 4, offset: 4927 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Ints', position: [Object] } ],
  position: {
    start: { line: 107, column: 1, offset: 4929 },
    end: { line: 107, column: 8, offset: 4936 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'inlineCode', value: 'int8', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: 'int16', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: 'int32', position: [Object] },
    { type: 'text', value: ' and ', position: [Object] },
    { type: 'inlineCode', value: 'int64', position: [Object] },
    {
      type: 'text',
      value: ' denote an integer of the corresponding size.\n',
      position: [Object]
    },
    { type: 'inlineCode', value: 'intptr', position: [Object] },
    {
      type: 'text',
      value: ' denotes a pointer-sized integer, i.e. C ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'long', position: [Object] },
    { type: 'text', value: ' type.', position: [Object] }
  ],
  position: {
    start: { line: 109, column: 1, offset: 4938 },
    end: { line: 110, column: 62, offset: 5081 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'By appending ', position: [Object] },
    { type: 'inlineCode', value: 'be', position: [Object] },
    { type: 'text', value: ' suffix (e.g. ', position: [Object] },
    { type: 'inlineCode', value: 'int16be', position: [Object] },
    {
      type: 'text',
      value: ') integers become big-endian.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 112, column: 1, offset: 5083 },
    end: { line: 112, column: 70, offset: 5152 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'It’s possible to specify a range of values for an integer in the format of ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'int32[0:100]', position: [Object] },
    { type: 'text', value: ' or ', position: [Object] },
    {
      type: 'inlineCode',
      value: 'int32[0:4096, 512]',
      position: [Object]
    },
    {
      type: 'text',
      value: ' for a 512-aligned int.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 114, column: 1, offset: 5154 },
    end: { line: 114, column: 137, offset: 5290 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Integers can also take a reference to flags description or a value as its first type-option.\n' +
        'In that case, the alignment parameter is not supported.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 116, column: 1, offset: 5292 },
    end: { line: 117, column: 56, offset: 5440 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'To denote a bitfield of size N use ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'int64:N', position: [Object] },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 119, column: 1, offset: 5442 },
    end: { line: 119, column: 46, offset: 5487 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'It’s possible to use these various kinds of ints as base types for ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'const', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: 'flags', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: 'len', position: [Object] },
    { type: 'text', value: ' and ', position: [Object] },
    { type: 'inlineCode', value: 'proc', position: [Object] },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 121, column: 1, offset: 5489 },
    end: { line: 121, column: 103, offset: 5591 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'example_struct {\n' +
    '\tf0\tint8\t\t\t# random 1-byte integer\n' +
    '\tf1\tconst[0x42, int16be]\t# const 2-byte integer with value 0x4200 (big-endian 0x42)\n' +
    '\tf2\tint32[0:100]\t\t# random 4-byte integer with values from 0 to 100 inclusive\n' +
    '\tf3\tint32[1:10, 2]\t\t# random 4-byte integer with values {1, 3, 5, 7, 9}\n' +
    '\tf4\tint64:20\t\t# random 20-bit bitfield\n' +
    '\tf5\tint8[10]\t\t# const 1-byte integer with value 10\n' +
    '\tf6\tint32[flagname]\t\t# random 4-byte integer from the set of values referenced by flagname\n' +
    '}',
  position: {
    start: { line: 123, column: 1, offset: 5593 },
    end: { line: 133, column: 4, offset: 6069 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Structs', position: [Object] } ],
  position: {
    start: { line: 135, column: 1, offset: 6071 },
    end: { line: 135, column: 11, offset: 6081 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Structs are described as:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 137, column: 1, offset: 6083 },
    end: { line: 137, column: 26, offset: 6108 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'structname "{" "\\n"\n' +
    '\t(fieldname type ("(" fieldattribute* ")")? (if[expression])? "\\n")+\n' +
    '"}" ("[" attribute* "]")?',
  position: {
    start: { line: 139, column: 1, offset: 6110 },
    end: { line: 143, column: 4, offset: 6232 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Fields can have attributes specified in parentheses after the field, independent\n' +
        'of their type. ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'in/out/inout', position: [Object] },
    {
      type: 'text',
      value: ' attribute specify per-field direction, for example:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 145, column: 1, offset: 6234 },
    end: { line: 146, column: 82, offset: 6396 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'foo {\n' +
    '\tfield0\tconst[1, int32]\t(in)\n' +
    '\tfield1\tint32\t\t(inout)\n' +
    '\tfield2\tfd\t\t(out)\n' +
    '}',
  position: {
    start: { line: 148, column: 1, offset: 6398 },
    end: { line: 154, column: 4, offset: 6483 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'You may specify conditions that determine whether a field will be included:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 156, column: 1, offset: 6485 },
    end: { line: 156, column: 76, offset: 6560 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'foo {\n\tfield0\tint32\n\tfield1\tint32 (if[value[field0] == 0x1])\n}',
  position: {
    start: { line: 158, column: 1, offset: 6562 },
    end: { line: 163, column: 4, offset: 6632 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'See ', position: [Object] },
    {
      type: 'link',
      title: null,
      url: 'syscall_descriptions_syntax.md#conditional-fields',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '\nfor more details.', position: [Object] }
  ],
  position: {
    start: { line: 165, column: 1, offset: 6634 },
    end: { line: 166, column: 18, offset: 6734 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'inlineCode', value: 'out_overlay', position: [Object] },
    {
      type: 'text',
      value: ' attribute allows to have separate input and output layouts for the struct.\n' +
        'Fields before the ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'out_overlay', position: [Object] },
    {
      type: 'text',
      value: ' field are input, fields starting from ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'out_overlay', position: [Object] },
    {
      type: 'text',
      value: ' are output.\n' +
        'Input and output fields overlap in memory (both start from the beginning of the struct in memory).\n' +
        'For example:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 168, column: 1, offset: 6736 },
    end: { line: 171, column: 13, offset: 7032 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'foo {\n' +
    '\tin0\tconst[1, int32]\n' +
    '\tin1\tflags[bar, int8]\n' +
    '\tin2\tptr[in, string]\n' +
    '\tout0\tfd\t(out_overlay)\n' +
    '\tout1\tint32\n' +
    '}',
  position: {
    start: { line: 173, column: 1, offset: 7034 },
    end: { line: 181, column: 4, offset: 7148 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Structs can have attributes specified in square brackets after the struct.\n' +
        'Attributes are:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 183, column: 1, offset: 7150 },
    end: { line: 184, column: 16, offset: 7240 }
  }
}
{
  type: 'list',
  ordered: false,
  start: null,
  spread: false,
  children: [
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    }
  ],
  position: {
    start: { line: 186, column: 1, offset: 7242 },
    end: { line: 188, column: 135, offset: 7761 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Unions', position: [Object] } ],
  position: {
    start: { line: 190, column: 1, offset: 7763 },
    end: { line: 190, column: 10, offset: 7772 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Unions are described as:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 192, column: 1, offset: 7774 },
    end: { line: 192, column: 25, offset: 7798 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'unionname "[" "\\n"\n' +
    '\t(fieldname type (if[expression])? "\\n")+\n' +
    '"]" ("[" attribute* "]")?',
  position: {
    start: { line: 194, column: 1, offset: 7800 },
    end: { line: 198, column: 4, offset: 7894 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'During fuzzing, syzkaller randomly picks one of the union options.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 200, column: 1, offset: 7896 },
    end: { line: 200, column: 67, offset: 7962 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'You may also specify conditions that determine whether the corresponding\n' +
        'option may or may not be selected, depending on values of other fields. See\n',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: 'syscall_descriptions_syntax.md#conditional-fields',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '\nfor more details.', position: [Object] }
  ],
  position: {
    start: { line: 202, column: 1, offset: 7964 },
    end: { line: 205, column: 18, offset: 8209 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Unions can have attributes specified in square brackets after the union.\n' +
        'Attributes are:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 207, column: 1, offset: 8211 },
    end: { line: 208, column: 16, offset: 8299 }
  }
}
{
  type: 'list',
  ordered: false,
  start: null,
  spread: false,
  children: [
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    },
    {
      type: 'listItem',
      spread: false,
      checked: null,
      children: [Array],
      position: [Object]
    }
  ],
  position: {
    start: { line: 210, column: 1, offset: 8301 },
    end: { line: 211, column: 134, offset: 8624 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Resources', position: [Object] } ],
  position: {
    start: { line: 213, column: 1, offset: 8626 },
    end: { line: 213, column: 13, offset: 8638 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Resources represent values that need to be passed from output of one syscall to input of another syscall. For example, ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'close', position: [Object] },
    {
      type: 'text',
      value: ' syscall requires an input value (fd) previously returned by ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'open', position: [Object] },
    { type: 'text', value: ' or ', position: [Object] },
    { type: 'inlineCode', value: 'pipe', position: [Object] },
    {
      type: 'text',
      value: ' syscall. To achieve this, ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'fd', position: [Object] },
    {
      type: 'text',
      value: ' is declared as a resource. This is a way of modelling dependencies between syscalls, as defining a syscall as the producer of a resource and another syscall as the consumer defines a loose sense of ordering between them. Resources are described as:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 215, column: 1, offset: 8640 },
    end: { line: 215, column: 484, offset: 9123 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: '"resource" identifier "[" underlying_type "]" [ ":" const ("," const)* ]',
  position: {
    start: { line: 217, column: 1, offset: 9125 },
    end: { line: 219, column: 4, offset: 9205 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'inlineCode',
      value: 'underlying_type',
      position: [Object]
    },
    { type: 'text', value: ' is either one of ', position: [Object] },
    { type: 'inlineCode', value: 'int8', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: 'int16', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: 'int32', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: 'int64', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: 'intptr', position: [Object] },
    {
      type: 'text',
      value: ' or another resource (which models inheritance, for example, a socket is a subtype of fd). The optional set of constants represent resource special values, for example, ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: '0xffffffffffffffff',
      position: [Object]
    },
    {
      type: 'text',
      value: ' (-1) for “no fd”, or ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'AT_FDCWD', position: [Object] },
    {
      type: 'text',
      value: ' for “the current dir”. Special values are used once in a while as resource values. If no special values specified, special value of ',
      position: [Object]
    },
    { type: 'inlineCode', value: '0', position: [Object] },
    {
      type: 'text',
      value: ' is used. Resources can then be used as types, for example:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 221, column: 1, offset: 9207 },
    end: { line: 221, column: 495, offset: 9701 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'resource fd[int32]: 0xffffffffffffffff, AT_FDCWD, 1000000\n' +
    'resource sock[fd]\n' +
    'resource sock_unix[sock]\n' +
    '\n' +
    'socket(...) sock\n' +
    'accept(fd sock, ...) sock\n' +
    'listen(fd sock, backlog int32)',
  position: {
    start: { line: 223, column: 1, offset: 9703 },
    end: { line: 231, column: 4, offset: 9886 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Resources don’t have to be necessarily returned by a syscall. They can be used as any other data type. For example:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 233, column: 1, offset: 9888 },
    end: { line: 233, column: 116, offset: 10003 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'resource my_resource[int32]\n' +
    '\n' +
    'request_producer(..., arg ptr[out, my_resource])\n' +
    'request_consumer(..., arg ptr[inout, test_struct])\n' +
    '\n' +
    'test_struct {\n' +
    '\t...\n' +
    '\tattr\tmy_resource\n' +
    '}',
  position: {
    start: { line: 235, column: 1, offset: 10005 },
    end: { line: 245, column: 4, offset: 10181 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'For more complex producer/consumer scenarios, field attributes can be utilized.\n' +
        'For example:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 247, column: 1, offset: 10183 },
    end: { line: 248, column: 13, offset: 10275 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'resource my_resource_1[int32]\n' +
    'resource my_resource_2[int32]\n' +
    '\n' +
    'request_produce1_consume2(..., arg ptr[inout, test_struct])\n' +
    '\n' +
    'test_struct {\n' +
    '\t...\n' +
    '\tfield0\tmy_resource_1\t(out)\n' +
    '\tfield1\tmy_resource_2\t(in)\n' +
    '}',
  position: {
    start: { line: 250, column: 1, offset: 10277 },
    end: { line: 261, column: 4, offset: 10482 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Each resource type must be “produced” (used as an output) by at least one syscall\n' +
        '(outside of unions and optional pointers) and “consumed” (used as an input)\n' +
        'by at least one syscall.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 263, column: 1, offset: 10484 },
    end: { line: 265, column: 25, offset: 10666 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Type Aliases', position: [Object] } ],
  position: {
    start: { line: 267, column: 1, offset: 10668 },
    end: { line: 267, column: 16, offset: 10683 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Complex types that are often repeated can be given short type aliases using the\n' +
        'following syntax:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 269, column: 1, offset: 10685 },
    end: { line: 270, column: 18, offset: 10782 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'type identifier underlying_type',
  position: {
    start: { line: 272, column: 1, offset: 10784 },
    end: { line: 274, column: 4, offset: 10823 }
  }
}
{
  type: 'paragraph',
  children: [ { type: 'text', value: 'For example:', position: [Object] } ],
  position: {
    start: { line: 276, column: 1, offset: 10825 },
    end: { line: 276, column: 13, offset: 10837 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'type signalno int32[0:65]\ntype net_port proc[20000, 4, int16be]',
  position: {
    start: { line: 278, column: 1, offset: 10839 },
    end: { line: 281, column: 4, offset: 10910 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Then, type alias can be used instead of the underlying type in any contexts.\n' +
        'Underlying type needs to be described as if it’s a struct field, that is,\n' +
        'with the base type if it’s required. However, type alias can be used as syscall\n' +
        'arguments as well. Underlying types are currently restricted to integer types,\n',
      position: [Object]
    },
    { type: 'inlineCode', value: 'ptr', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: 'ptr64', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: 'const', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: 'flags', position: [Object] },
    { type: 'text', value: ' and ', position: [Object] },
    { type: 'inlineCode', value: 'proc', position: [Object] },
    { type: 'text', value: ' types.', position: [Object] }
  ],
  position: {
    start: { line: 283, column: 1, offset: 10912 },
    end: { line: 287, column: 51, offset: 11272 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'There are some builtin type aliases:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 289, column: 1, offset: 11274 },
    end: { line: 289, column: 37, offset: 11310 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'type bool8\tint8[0:1]\n' +
    'type bool16\tint16[0:1]\n' +
    'type bool32\tint32[0:1]\n' +
    'type bool64\tint64[0:1]\n' +
    'type boolptr\tintptr[0:1]\n' +
    '\n' +
    'type fileoff[BASE] BASE\n' +
    '\n' +
    'type filename string[filename]\n' +
    '\n' +
    'type buffer[DIR] ptr[DIR, array[int8]]',
  position: {
    start: { line: 290, column: 1, offset: 11311 },
    end: { line: 302, column: 4, offset: 11530 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Type Templates', position: [Object] } ],
  position: {
    start: { line: 304, column: 1, offset: 11532 },
    end: { line: 304, column: 18, offset: 11549 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Type templates can be declared as follows:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 306, column: 1, offset: 11551 },
    end: { line: 306, column: 43, offset: 11593 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'type buffer[DIR] ptr[DIR, array[int8]]\n' +
    'type fileoff[BASE] BASE\n' +
    'type nlattr[TYPE, PAYLOAD] {\n' +
    '\tnla_len\t\tlen[parent, int16]\n' +
    '\tnla_type\tconst[TYPE, int16]\n' +
    '\tpayload\t\tPAYLOAD\n' +
    '} [align_4]',
  position: {
    start: { line: 307, column: 1, offset: 11594 },
    end: { line: 315, column: 4, offset: 11781 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'and later used as follows:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 317, column: 1, offset: 11783 },
    end: { line: 317, column: 27, offset: 11809 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'syscall(a buffer[in], b fileoff[int64], c ptr[in, nlattr[FOO, int32]])',
  position: {
    start: { line: 318, column: 1, offset: 11810 },
    end: { line: 320, column: 4, offset: 11888 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'There is builtin type template ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'optional', position: [Object] },
    { type: 'text', value: ' defined as:', position: [Object] }
  ],
  position: {
    start: { line: 322, column: 1, offset: 11890 },
    end: { line: 322, column: 54, offset: 11943 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'type optional[T] [\n\tval\tT\n\tvoid\tvoid\n] [varlen]',
  position: {
    start: { line: 323, column: 1, offset: 11944 },
    end: { line: 328, column: 4, offset: 11999 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Length', position: [Object] } ],
  position: {
    start: { line: 330, column: 1, offset: 12001 },
    end: { line: 330, column: 10, offset: 12010 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'You can specify length of a particular field in struct or a named argument by\n' +
        'using ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'len', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: 'bytesize', position: [Object] },
    { type: 'text', value: ' and ', position: [Object] },
    { type: 'inlineCode', value: 'bitsize', position: [Object] },
    { type: 'text', value: ' types, for example:', position: [Object] }
  ],
  position: {
    start: { line: 332, column: 1, offset: 12012 },
    end: { line: 333, column: 58, offset: 12147 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'write(fd fd, buf ptr[in, array[int8]], count len[buf])\n' +
    '\n' +
    'sock_fprog {\n' +
    '\tlen\tlen[filter, int16]\n' +
    '\tfilter\tptr[in, array[sock_filter]]\n' +
    '}',
  position: {
    start: { line: 335, column: 1, offset: 12149 },
    end: { line: 342, column: 4, offset: 12287 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'If ', position: [Object] },
    { type: 'inlineCode', value: 'len', position: [Object] },
    {
      type: 'text',
      value: '’s argument is a pointer, then the length of the pointee argument is used.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 344, column: 1, offset: 12289 },
    end: { line: 344, column: 83, offset: 12371 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'To denote the length of a field in N-byte words use ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'bytesizeN', position: [Object] },
    {
      type: 'text',
      value: ', possible values\nfor N are 1, 2, 4 and 8.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 346, column: 1, offset: 12373 },
    end: { line: 347, column: 25, offset: 12478 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'To denote the length of the parent struct, you can use ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'len[parent, int8]',
      position: [Object]
    },
    {
      type: 'text',
      value: '.\n' +
        'To denote the length of the higher level parent when structs are embedded into\n' +
        'one another, you can specify the type name of the particular parent:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 349, column: 1, offset: 12480 },
    end: { line: 351, column: 69, offset: 12703 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 's1 {\n' +
    '    f0      len[s2]  # length of s2\n' +
    '}\n' +
    '\n' +
    's2 {\n' +
    '    f0      s1\n' +
    '    f1      array[int32]\n' +
    '    f2      len[parent, int32]\n' +
    '}',
  position: {
    start: { line: 353, column: 1, offset: 12705 },
    end: { line: 363, column: 4, offset: 12834 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'inlineCode', value: 'len', position: [Object] },
    {
      type: 'text',
      value: ' argument can also be a path expression which allows more complex\n' +
        'addressing. Path expressions are similar to C field references, but also allow\n' +
        'referencing parent and sibling elements. A special reference ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syscall', position: [Object] },
    {
      type: 'text',
      value: ' used\n' +
        'in the beginning of the path allows to refer directly to the syscall arguments.\n' +
        'For example:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 365, column: 1, offset: 12836 },
    end: { line: 369, column: 13, offset: 13154 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 's1 {\n' +
    '\ta\tptr[in, s2]\n' +
    '\tb\tptr[in, s3]\n' +
    '\tc\tarray[int8]\n' +
    '}\n' +
    '\n' +
    's2 {\n' +
    '\td\tarray[int8]\n' +
    '}\n' +
    '\n' +
    's3 {\n' +
    '# This refers to the array c in the parent s1.\n' +
    '\te\tlen[s1:c, int32]\n' +
    '# This refers to the array d in the sibling s2.\n' +
    '\tf\tlen[s1:a:d, int32]\n' +
    '# This refers to the array k in the child s4.\n' +
    '\tg\tlen[i:j, int32]\n' +
    '# This refers to syscall argument l.\n' +
    '\th\tlen[syscall:l, int32]\n' +
    '\ti\tptr[in, s4]\n' +
    '}\n' +
    '\n' +
    's4 {\n' +
    '\tj\tarray[int8]\n' +
    '}\n' +
    '\n' +
    'foo(k ptr[in, s1], l ptr[in, array[int8]])',
  position: {
    start: { line: 371, column: 1, offset: 13156 },
    end: { line: 399, column: 4, offset: 13592 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Proc', position: [Object] } ],
  position: {
    start: { line: 401, column: 1, offset: 13594 },
    end: { line: 401, column: 8, offset: 13601 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'The ', position: [Object] },
    { type: 'inlineCode', value: 'proc', position: [Object] },
    {
      type: 'text',
      value: ' type can be used to denote per process integers.\n' +
        'The idea is to have a separate range of values for each executor, so they don’t interfere.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 403, column: 1, offset: 13603 },
    end: { line: 404, column: 91, offset: 13753 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The simplest example is a port number.\nThe ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'proc[20000, 4, int16be]',
      position: [Object]
    },
    {
      type: 'text',
      value: ' type means that we want to generate an ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'int16be', position: [Object] },
    {
      type: 'text',
      value: '\ninteger starting from ',
      position: [Object]
    },
    { type: 'inlineCode', value: '20000', position: [Object] },
    { type: 'text', value: ' and assign ', position: [Object] },
    { type: 'inlineCode', value: '4', position: [Object] },
    {
      type: 'text',
      value: ' values for each process.\nAs a result the executor number ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'n', position: [Object] },
    {
      type: 'text',
      value: ' will get values in the ',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: '[20000 + n * 4, 20000 + (n + 1) * 4)',
      position: [Object]
    },
    { type: 'text', value: ' range.', position: [Object] }
  ],
  position: {
    start: { line: 406, column: 1, offset: 13755 },
    end: { line: 409, column: 105, offset: 14047 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Integer Constants', position: [Object] } ],
  position: {
    start: { line: 411, column: 1, offset: 14049 },
    end: { line: 411, column: 21, offset: 14069 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Integer constants can be specified as decimal literals, as ',
      position: [Object]
    },
    { type: 'inlineCode', value: '0x', position: [Object] },
    {
      type: 'text',
      value: '-prefixed\nhex literals, as ',
      position: [Object]
    },
    { type: 'inlineCode', value: "'", position: [Object] },
    {
      type: 'text',
      value: '-surrounded char literals, or as symbolic constants\n' +
        'extracted from kernel headers or defined by ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'define', position: [Object] },
    {
      type: 'text',
      value: ' directives. For example:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 413, column: 1, offset: 14071 },
    end: { line: 415, column: 78, offset: 14293 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'foo(a const[10], b const[-10])\n' +
    'foo(a const[0xabcd])\n' +
    "foo(a int8['a':'z'])\n" +
    'foo(a const[PATH_MAX])\n' +
    'foo(a int32[PATH_MAX])\n' +
    'foo(a ptr[in, array[int8, MY_PATH_MAX]])\n' +
    'define MY_PATH_MAX\tPATH_MAX + 2',
  position: {
    start: { line: 417, column: 1, offset: 14295 },
    end: { line: 425, column: 4, offset: 14494 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Conditional fields', position: [Object] } ],
  position: {
    start: { line: 427, column: 1, offset: 14496 },
    end: { line: 427, column: 22, offset: 14517 }
  }
}
{
  type: 'heading',
  depth: 3,
  children: [ { type: 'text', value: 'In structures', position: [Object] } ],
  position: {
    start: { line: 429, column: 1, offset: 14519 },
    end: { line: 429, column: 18, offset: 14536 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'In syzlang, it’s possible to specify a condition for every struct field that\n' +
        'determines whether the field should be included or omitted:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 431, column: 1, offset: 14538 },
    end: { line: 432, column: 60, offset: 14674 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'header_fields {\n' +
    '  magic       const[0xabcd, int16]\n' +
    '  haveInteger int8\n' +
    '} [packed]\n' +
    '\n' +
    'packet {\n' +
    '  header  header_fields\n' +
    '  integer int64  (if[value[header:haveInteger] == 0x1])\n' +
    '  body    array[int8]\n' +
    '} [packed]\n' +
    '\n' +
    'some_call(a ptr[in, packet])',
  position: {
    start: { line: 434, column: 1, offset: 14676 },
    end: { line: 447, column: 4, offset: 14917 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'In this example, the ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'packet', position: [Object] },
    {
      type: 'text',
      value: ' structure will include the field ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'integer', position: [Object] },
    { type: 'text', value: ' only\nif ', position: [Object] },
    {
      type: 'inlineCode',
      value: 'header.haveInteger == 1',
      position: [Object]
    },
    { type: 'text', value: '. In memory, ', position: [Object] },
    { type: 'inlineCode', value: 'packet', position: [Object] },
    {
      type: 'text',
      value: ' will have the following\nlayout:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 449, column: 1, offset: 14919 },
    end: { line: 451, column: 8, offset: 15078 }
  }
}
{
  type: 'table',
  align: [ null, null, null, null ],
  children: [ { type: 'tableRow', children: [Array], position: [Object] } ],
  position: {
    start: { line: 453, column: 1, offset: 15080 },
    end: { line: 454, column: 18, offset: 15179 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'That corresponds to e.g. the following program:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 457, column: 1, offset: 15182 },
    end: { line: 457, column: 48, offset: 15229 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'some_call(&AUTO={{AUTO, 0x1}, @value=0xabcd, []})',
  position: {
    start: { line: 458, column: 1, offset: 15230 },
    end: { line: 460, column: 4, offset: 15287 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'If ', position: [Object] },
    {
      type: 'inlineCode',
      value: 'header.haveInteger',
      position: [Object]
    },
    { type: 'text', value: ' is not ', position: [Object] },
    { type: 'inlineCode', value: '1', position: [Object] },
    {
      type: 'text',
      value: ', syzkaller will just pretend that the field\n',
      position: [Object]
    },
    { type: 'inlineCode', value: 'integer', position: [Object] },
    { type: 'text', value: ' does not exist.', position: [Object] }
  ],
  position: {
    start: { line: 462, column: 1, offset: 15289 },
    end: { line: 463, column: 26, offset: 15393 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'some_call(&AUTO={{AUTO, 0x0}, @void, []})',
  position: {
    start: { line: 464, column: 1, offset: 15394 },
    end: { line: 466, column: 4, offset: 15443 }
  }
}
{
  type: 'table',
  align: [ null, null, null ],
  children: [ { type: 'tableRow', children: [Array], position: [Object] } ],
  position: {
    start: { line: 468, column: 1, offset: 15445 },
    end: { line: 469, column: 14, offset: 15530 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Every conditional field is assumed to be of variable length and so is the struct\n' +
        'to which this field belongs.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 471, column: 1, offset: 15532 },
    end: { line: 472, column: 29, offset: 15641 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'When a variable length field appears in the middle of a structure, the structure\n' +
        'must be marked with ',
      position: [Object]
    },
    { type: 'inlineCode', value: '[packed].', position: [Object] }
  ],
  position: {
    start: { line: 474, column: 1, offset: 15643 },
    end: { line: 475, column: 32, offset: 15755 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Conditions on bitfields are prohibited:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 477, column: 1, offset: 15757 },
    end: { line: 477, column: 40, offset: 15796 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'struct {\n' +
    '  f0 int\n' +
    '  f1 int:3 (if[value[f0] == 0x1])  # It will not compile.\n' +
    '}',
  position: {
    start: { line: 478, column: 1, offset: 15797 },
    end: { line: 483, column: 4, offset: 15882 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'But you may reference bitfields in your conditions:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 485, column: 1, offset: 15884 },
    end: { line: 485, column: 52, offset: 15935 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'struct {\n' +
    '  f0 int:1\n' +
    '  f1 int:7\n' +
    '  f2 int   (if[value[f0] == value[f1]])\n' +
    '} [packed]',
  position: {
    start: { line: 486, column: 1, offset: 15936 },
    end: { line: 492, column: 4, offset: 16025 }
  }
}
{
  type: 'heading',
  depth: 3,
  children: [ { type: 'text', value: 'In unions', position: [Object] } ],
  position: {
    start: { line: 494, column: 1, offset: 16027 },
    end: { line: 494, column: 14, offset: 16040 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Let’s consider the following example.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 496, column: 1, offset: 16042 },
    end: { line: 496, column: 38, offset: 16079 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'struct {\n' +
    '  type int\n' +
    '  body alternatives\n' +
    '}\n' +
    '\n' +
    'alternatives [\n' +
    '  int     int64 (if[value[struct:type] == 0x1])\n' +
    '  arr     array[int64, 5] (if[value[struct:type] == 0x2])\n' +
    '  default int32\n' +
    '] [varlen]\n' +
    '\n' +
    'some_call(a ptr[in, struct])',
  position: {
    start: { line: 498, column: 1, offset: 16081 },
    end: { line: 511, column: 4, offset: 16309 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'In this case, the union option will be selected depending on the value of the\n',
      position: [Object]
    },
    { type: 'inlineCode', value: 'type', position: [Object] },
    {
      type: 'text',
      value: ' field. For example, if ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'type', position: [Object] },
    { type: 'text', value: ' is ', position: [Object] },
    { type: 'inlineCode', value: '0x1', position: [Object] },
    {
      type: 'text',
      value: ', then it can be either ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'int', position: [Object] },
    { type: 'text', value: ' or\n', position: [Object] },
    { type: 'inlineCode', value: 'default', position: [Object] },
    { type: 'text', value: ':', position: [Object] }
  ],
  position: {
    start: { line: 513, column: 1, offset: 16311 },
    end: { line: 515, column: 11, offset: 16477 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'some_call(&AUTO={0x1, @int=0x123})\nsome_call(&AUTO={0x1, @default=0x123})',
  position: {
    start: { line: 516, column: 1, offset: 16478 },
    end: { line: 519, column: 4, offset: 16559 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'If ', position: [Object] },
    { type: 'inlineCode', value: 'type', position: [Object] },
    { type: 'text', value: ' is ', position: [Object] },
    { type: 'inlineCode', value: '0x2', position: [Object] },
    { type: 'text', value: ', it can be either ', position: [Object] },
    { type: 'inlineCode', value: 'arr', position: [Object] },
    { type: 'text', value: ' or ', position: [Object] },
    { type: 'inlineCode', value: 'default', position: [Object] },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 521, column: 1, offset: 16561 },
    end: { line: 521, column: 57, offset: 16617 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'If ', position: [Object] },
    { type: 'inlineCode', value: 'type', position: [Object] },
    { type: 'text', value: ' is neither ', position: [Object] },
    { type: 'inlineCode', value: '0x1', position: [Object] },
    { type: 'text', value: ' nor ', position: [Object] },
    { type: 'inlineCode', value: '0x2', position: [Object] },
    {
      type: 'text',
      value: ', syzkaller may only select ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'default', position: [Object] },
    { type: 'text', value: ':', position: [Object] }
  ],
  position: {
    start: { line: 523, column: 1, offset: 16619 },
    end: { line: 523, column: 75, offset: 16693 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'some_call(&AUTO={0x0, @default=0xabcd})',
  position: {
    start: { line: 524, column: 1, offset: 16694 },
    end: { line: 526, column: 4, offset: 16741 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'To ensure that a union can always be constructed, the last union field ',
      position: [Object]
    },
    { type: 'strong', children: [Array], position: [Object] },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 528, column: 1, offset: 16743 },
    end: { line: 529, column: 21, offset: 16848 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Thus, the following definition would fail to compile:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 531, column: 1, offset: 16850 },
    end: { line: 531, column: 54, offset: 16903 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'alternatives [\n' +
    '  int int64 (if[value[struct:type] == 0x1])\n' +
    '  arr array[int64, 5] (if[value[struct:type] == 0x1])\n' +
    '] [varlen]',
  position: {
    start: { line: 533, column: 1, offset: 16905 },
    end: { line: 538, column: 4, offset: 17036 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'During prog mutation and generation syzkaller will select a random union field\n' +
        'whose condition is satisfied.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 540, column: 1, offset: 17038 },
    end: { line: 541, column: 30, offset: 17146 }
  }
}
{
  type: 'heading',
  depth: 3,
  children: [ { type: 'text', value: 'Expression syntax', position: [Object] } ],
  position: {
    start: { line: 544, column: 1, offset: 17149 },
    end: { line: 544, column: 22, offset: 17170 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'Currently, only ', position: [Object] },
    { type: 'inlineCode', value: '==', position: [Object] },
    { type: 'text', value: ', ', position: [Object] },
    { type: 'inlineCode', value: '!=', position: [Object] },
    { type: 'text', value: ' and ', position: [Object] },
    { type: 'inlineCode', value: '&', position: [Object] },
    {
      type: 'text',
      value: ' operators are supported. However, the\n' +
        'functionality was designed in such a way that adding more operators is easy.\n' +
        'Feel free to file a GitHub issue or write us an email in case it’s needed.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 546, column: 1, offset: 17172 },
    end: { line: 548, column: 75, offset: 17396 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Expressions are evaluated as ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'int64', position: [Object] },
    {
      type: 'text',
      value: ' values. If the final result of an\n' +
        'expression is not 0, it’s assumed to be satisfied.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 550, column: 1, offset: 17398 },
    end: { line: 551, column: 51, offset: 17519 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'If you want to reference a field’s value, you can do it via\n',
      position: [Object]
    },
    {
      type: 'inlineCode',
      value: 'value[path:to:field]',
      position: [Object]
    },
    {
      type: 'text',
      value: ', which is similar to the ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'len[]', position: [Object] },
    { type: 'text', value: ' argument.', position: [Object] }
  ],
  position: {
    start: { line: 553, column: 1, offset: 17521 },
    end: { line: 554, column: 66, offset: 17646 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'sub_struct {\n' +
    '  f0 int\n' +
    '  # Reference a field in a parent struct.\n' +
    '  f1 int (if[value[struct:f2]]) # Same as if[value[struct:f2] != 0]].\n' +
    '}\n' +
    '\n' +
    'struct {\n' +
    '  f2 int\n' +
    '  f3 sub_struct\n' +
    '  f4 int (if[value[f2] == 0x2]) # Reference a sibling field.\n' +
    '  f5 int (if[value[f3:f0] == 0x1]) # Reference a nested field.\n' +
    '} [packed]\n' +
    '\n' +
    'call(a ptr[in, struct])',
  position: {
    start: { line: 556, column: 1, offset: 17648 },
    end: { line: 571, column: 4, offset: 17986 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The referenced field must be of integer type and there must be no\n' +
        'conditional fields in the path to it. For example, the following\n' +
        'descriptions will not compile.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 573, column: 1, offset: 17988 },
    end: { line: 575, column: 31, offset: 18149 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'struct {\n' +
    '  f0 int\n' +
    '  f1 int (if[value[f0] == 0x1])\n' +
    '  f2 int (if[value[f1] == 0x1])\n' +
    '}',
  position: {
    start: { line: 577, column: 1, offset: 18151 },
    end: { line: 583, column: 4, offset: 18242 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'You may also reference constants in expressions:',
      position: [Object]
    }
  ],
  position: {
    start: { line: 585, column: 1, offset: 18244 },
    end: { line: 585, column: 49, offset: 18292 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'struct {\n' +
    '  f0 int\n' +
    '  f1 int\n' +
    '  f2 int (if[value[f0] & SOME_CONST == OTHER_CONST])\n' +
    '}',
  position: {
    start: { line: 586, column: 1, offset: 18293 },
    end: { line: 592, column: 4, offset: 18382 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Meta', position: [Object] } ],
  position: {
    start: { line: 594, column: 1, offset: 18384 },
    end: { line: 594, column: 8, offset: 18391 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Description files can also contain ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'meta', position: [Object] },
    {
      type: 'text',
      value: ' directives that specify meta-information for the whole file.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 596, column: 1, offset: 18393 },
    end: { line: 596, column: 103, offset: 18495 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'meta noextract',
  position: {
    start: { line: 598, column: 1, offset: 18497 },
    end: { line: 600, column: 4, offset: 18519 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'Tells ', position: [Object] },
    { type: 'inlineCode', value: 'make extract', position: [Object] },
    {
      type: 'text',
      value: ' to not extract constants for this file.\nThough, ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'syz-extract', position: [Object] },
    {
      type: 'text',
      value: ' can still be invoked manually on this file.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 601, column: 1, offset: 18520 },
    end: { line: 602, column: 66, offset: 18646 }
  }
}
{
  type: 'code',
  lang: null,
  meta: null,
  value: 'meta arches["arch1", "arch2"]',
  position: {
    start: { line: 604, column: 1, offset: 18648 },
    end: { line: 606, column: 4, offset: 18685 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Restricts this file only to the given set of architectures.\n',
      position: [Object]
    },
    { type: 'inlineCode', value: 'make extract', position: [Object] },
    { type: 'text', value: ' and ', position: [Object] },
    { type: 'inlineCode', value: 'make generate', position: [Object] },
    {
      type: 'text',
      value: ' will not use it on other architectures.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 607, column: 1, offset: 18686 },
    end: { line: 608, column: 75, offset: 18820 }
  }
}
{
  type: 'heading',
  depth: 2,
  children: [ { type: 'text', value: 'Misc', position: [Object] } ],
  position: {
    start: { line: 610, column: 1, offset: 18822 },
    end: { line: 610, column: 8, offset: 18829 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'Description files also contain ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'include', position: [Object] },
    {
      type: 'text',
      value: ' directives that refer to Linux kernel header files,\n',
      position: [Object]
    },
    { type: 'inlineCode', value: 'incdir', position: [Object] },
    {
      type: 'text',
      value: ' directives that refer to custom Linux kernel header directories\nand ',
      position: [Object]
    },
    { type: 'inlineCode', value: 'define', position: [Object] },
    {
      type: 'text',
      value: ' directives that define symbolic constant values.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 612, column: 1, offset: 18831 },
    end: { line: 614, column: 62, offset: 19058 }
  }
}
{
  type: 'paragraph',
  children: [
    {
      type: 'text',
      value: 'The syzkaller executor defines some ',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: './pseudo_syscalls.md',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: '\n' +
        'that can be used as any other syscall in a description file. These pseudo\n' +
        'system calls expand to literal C code and can perform user-defined\n' +
        'custom actions. You can find some examples in\n',
      position: [Object]
    },
    {
      type: 'link',
      title: null,
      url: '../executor/common_linux.h',
      children: [Array],
      position: [Object]
    },
    { type: 'text', value: '.', position: [Object] }
  ],
  position: {
    start: { line: 616, column: 1, offset: 19060 },
    end: { line: 620, column: 55, offset: 19381 }
  }
}
{
  type: 'paragraph',
  children: [
    { type: 'text', value: 'Also see ', position: [Object] },
    {
      type: 'link',
      title: null,
      url: 'syscall_descriptions.md#tips',
      children: [Array],
      position: [Object]
    },
    {
      type: 'text',
      value: ' on writing good descriptions.',
      position: [Object]
    }
  ],
  position: {
    start: { line: 622, column: 1, offset: 19383 },
    end: { line: 622, column: 76, offset: 19458 }
  }
}
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
